<?xml version="1.0"?>
<appSettings>
  <add key="ClientValidationEnabled" value="true" />
  <add key="UnobtrusiveJavaScriptEnabled" value="true" />
  <!-- Set "ShuntState" to "Shunted" to shunt the site. -->
  <add key="ShuntState" value="" />
  <add key="ShuntMessage" value="%APP_NAME% is currently down for maintenance and will be back shortly.  We hope to be back by 2am PDT (9am Zulu) We apologize for the inconvenience!  See our Facebook page for progress updates." />

  <!-- Base query for the logbook.  We explicitly request fields so that we can exclude flight data -->
  <add key="LogbookForUserQuery"
       value="SELECT flights.idFlight,
    flights.date,
    flights.idaircraft,
    flights.cInstrumentApproaches,
    flights.cLandings,
    flights.crosscountry,
    flights.night,
    flights.IMC,
    flights.simulatedInstrument,
    flights.dualReceived,
    flights.PIC,
    flights.totalFlightTime,
    flights.fHold,
    flights.Route,
    flights.Comments,
    flights.username,
    flights.groundSim,
    flights.fPublic,
    flights.hobbsStart,
    flights.hobbsEnd,
    IF(YEAR(flights.dtEngineStart) &lt; 100, NULL, flights.dtEngineStart) AS dtEngineStart,
    IF(YEAR(flights.dtEngineEnd) &lt; 100, NULL, flights.dtEngineEnd) AS dtEngineEnd,
    IF(YEAR(flights.dtFlightStart) &lt; 100, NULL, flights.dtFlightStart) AS dtFlightStart,
    IF(YEAR(flights.dtFlightEnd) &lt; 100, NULL, flights.dtFlightEnd) AS dtFlightEnd,
    flights.cfi,
    flights.SIC,
    flights.cNightLandings,
    flights.cFullStopLandings,
    flights.idCatClassOverride,
    flights.FlightHash,
    flights.SignatureHash,
    flights.CFIComment,
    flights.SignatureDate,
    flights.CFICertificate,
    flights.CFIExpiration,
    flights.CFIUserName,
    flights.CFIEmail,
    flights.CFIName,
    IF (flights.DigitizedSignature IS NOT NULL AND Length(DigitizedSignature) > 0, 1, 0) AS HasDigitizedSignature,
    flights.SignatureState,
    {0}
    IF (coalesce(flights.Telemetry, ft.idflight) IS NULL, 0, 1) AS FlightDataLength,
    ft.distance,
    ft.flightpath,
    ft.telemetrytype,
    ft.metadata,
    fp2.DateValue AS blockOut,
	IF (fv.idFlightVideos IS NULL, CONVERT(null using utf8mb4), CAST(CONCAT('[', GROUP_CONCAT(DISTINCT JSON_OBJECT('ID', fv.idFlightVideos, 'FlightID', fv.idFlight, 'VideoReference', fv.vidRef, 'Comment', fv.comment)), ']') AS JSON)) AS FlightVids,
	IF (fdc.idprop IS NULL, CONVERT(null using utf8mb4), JSON_ARRAYAGG(JSON_OBJECT('PropID', fdc.idprop, 'PropTypeID', fdc.idPropType, 'ValueString', ELT(cpt.type + 1, fdc.IntValue, fdc.DecValue, IF(fdc.IntValue&lt;&gt;0, 'true', 'false'), fdc.DateValue, fdc.DateValue, fdc.StringValue, fdc.DecValue)))) AS CustomPropsJSON,
    GROUP_CONCAT(DISTINCT REPLACE(cpt.FormatString, '{{0}}', ELT(cpt.type + 1, fdc.IntValue, fdc.DecValue, '', fdc.DateValue, fdc.DateValue, fdc.StringValue, fdc.DecValue)) SEPARATOR ' ') AS CustomProperties,
    models.*,
    IF(models.fTAA &lt;&gt; 0 OR (aircraft.HasTAAUpgrade  &lt;&gt; 0 AND (aircraft.GlassUpgradeDate IS NULL OR flights.date >= aircraft.GlassUpgradeDate)), 1, 0) AS IsTAA,
    if (flights.idCatClassOverride = 0 OR flights.idCatClassOverride=models.idCategoryClass, 0, 1) AS IsOverridden,
    if (flights.idCatClassOverride = 0, models.idcategoryclass, flights.idCatClassOverride) AS CatClassOverride,
    TRIM(CONCAT(models.model, ', ', manufacturers.Manufacturer, ' ',  models.typename, ' ', models.modelname)) AS ModelDisplay,
    TRIM(CONCAT(manufacturers.Manufacturer, ' ', models.model)) AS ShortModelDisplay,
    IF(models.family is null OR models.family='', models.model, models.family) AS FamilyDisplay,
    IF (aircraft.Tailnumber LIKE '#%', CONCAT('(', models.model, ')'), aircraft.tailnumber) AS 'TailNumberDisplay',
    aircraft.TailNumber AS RawTailNumber,
    aircraft.InstanceType,
    CONCAT(IF(ccOver.CatClass is null, ccOrig.CatClass, ccOver.CatClass), IF(models.typename='','', CONCAT(' (', models.typename, ')'))) AS CatClassDisplay
FROM flights
  INNER JOIN aircraft ON flights.idaircraft = aircraft.idaircraft
  INNER JOIN models ON aircraft.idmodel = models.idmodel
  INNER JOIN manufacturers ON manufacturers.idmanufacturer = models.idmanufacturer
  INNER JOIN categoryclass ccOrig ON (models.idCategoryClass = ccOrig.idCatClass)
  {1}
  LEFT JOIN flighttelemetry ft ON (flights.idflight=ft.idflight)
  LEFT JOIN categoryclass ccOver ON (flights.idCatClassOverride = ccOver.idCatClass)
  LEFT JOIN FlightProperties fdc ON flights.idFlight=fdc.idFlight
  LEFT JOIN custompropertytypes cpt ON fdc.idPropType=cpt.idPropType
  LEFT JOIN flightvideos fv ON fv.idflight=flights.idflight
  LEFT JOIN FlightProperties fp2 ON flights.idflight=fp2.idflight AND fp2.idproptype=187
WHERE {2}
GROUP BY flights.idFlight, aircraft.idaircraft
{3}
ORDER BY flights.date {4}, COALESCE(blockOut, '0001-01-01') {4}, COALESCE(dtEngineStart, '0001-01-01') {4}, COALESCE(dtFlightStart, '0001-01-01') {4}, hobbsStart {4}, flights.idFlight {4}
{5}
    " />
  
  <!-- Base query for performing currency computations -->
  <add key="FlightsCurrencyQuery"
       value="SELECT f.*,
       Concat(COALESCE(l.Text, categoryclass.CatClass), if(f.typename = '', '', Concat(' (', f.typename, ')'))) as CatClassWithType,
       categoryclass.CatClass AS BaseCatClass,
       f.typename AS TypeName,
       categoryclass.category AS Category
         FROM (SELECT flights.date AS 'Date',
         Flights.idFlight as FlightID,
         cInstrumentApproaches, 
         IMC,
         PIC,
         SIC,
         CFI,
         simulatedInstrument,
         cLandings, 
         cNightLandings,
         cFullStopLandings,
         night, 
         fHold, 
         route,
         totalFlightTime,
         dualReceived,
         crosscountry,
         groundSim,
         comments,
         models.fTailwheel as fTailWheel,
         models.ArmyMissionDesignSeries AS ArmyMDS,
         models.family AS family,
         aircraftinstancetypes.ID AS InstanceTypeID,
         aircraftinstancetypes.*,
         models.typename,
         models.model,
         models.idmodel,
         models.fcomplex,
         models.fTurbine,
         models.fCertifiedSinglePilot,
         models.fMotorGlider,
         IF(models.fTAA &lt;&gt; 0 OR (aircraft.HasTAAUpgrade  &lt;&gt; 0 AND (aircraft.GlassUpgradeDate IS NULL OR flights.date >= aircraft.GlassUpgradeDate)), 1, 0) AS IsTAA,
         IF(YEAR(flights.dtEngineStart) &lt; 100, NULL, flights.dtEngineStart) AS dtEngineStart,
         IF(YEAR(flights.dtEngineEnd) &lt; 100, NULL, flights.dtEngineEnd) AS dtEngineEnd,
         IF(YEAR(flights.dtFlightStart) &lt; 100, NULL, flights.dtFlightStart) AS dtFlightStart,
         IF(YEAR(flights.dtFlightEnd) &lt; 100, NULL, flights.dtFlightEnd) AS dtFlightEnd,
         hobbsStart,
         aircraft.idaircraft,
         IF (man.idManufacturer = 20 AND models.idcategoryclass=7 AND (models.model LIKE 'R%22' OR models.typename LIKE 'R%22'), 1, 0) AS IsR22,
         IF (man.idManufacturer = 20 AND models.idcategoryclass=7 AND (models.model LIKE 'R%44' OR models.typename LIKE 'R%44'), 1, 0) AS IsR44,
         IF (flights.idCatClassOverride = 0, 0, 1) AS IsOverridden,
         IF (flights.idCatClassOverride = 0, models.idcategoryclass, flights.idCatClassOverride) AS CatClassOverride,
         fdc2.dateValue AS blockOut,
		 IF (fdc.idprop IS NULL, CONVERT(null using utf8mb4), JSON_ARRAYAGG(JSON_OBJECT('PropID', fdc.idprop, 'PropTypeID', fdc.idPropType, 'ValueString', ELT(cpt.type + 1, fdc.IntValue, fdc.DecValue, IF(fdc.IntValue&lt;&gt;0, 'true', 'false'), fdc.DateValue, fdc.DateValue, fdc.StringValue, fdc.DecValue)))) AS CustomPropsJSON
         FROM flights INNER JOIN aircraft on flights.idaircraft = aircraft.idaircraft
           INNER JOIN models on aircraft.idmodel = models.idmodel
           INNER JOIN manufacturers man ON models.idManufacturer=man.idManufacturer
           INNER JOIN aircraftinstancetypes on aircraft.InstanceType = aircraftinstancetypes.ID
           LEFT JOIN FlightProperties fdc ON flights.idFlight=fdc.idFlight
           LEFT JOIN custompropertytypes cpt ON fdc.idPropType=cpt.idPropType
           LEFT JOIN FlightProperties fdc2 ON flights.idFlight=fdc2.idflight AND fdc2.idPropType=187
         WHERE flights.username = ?UserName 
         GROUP BY flights.idflight
         ORDER BY flights.date DESC) f
           INNER JOIN categoryclass on f.CatClassOverride = categoryclass.idCatClass
           LEFT JOIN LocText l ON (l.idTableID = 1 AND f.CatClassOverride = l.idItemID AND l.langID = ?langID)
         ORDER BY f.date {0}, blockOut {0}, dtEngineStart {0}, dtFlightStart {0}, hobbsStart {0}, f.FlightID {0}" />
  
  
  <!-- Base query for getting elapsed times, if needed -->
  <add key="TotalTimesSubQuery" value="SUM(IF(YEAR(dtFlightStart) > 1 AND YEAR(dtFlightEnd) > 1 AND dtFlightEnd > dtFlightStart, TIME_TO_SEC(TIMEDIFF(dtFlightEnd, dtFlightStart)) / 3600.0, 0)) AS TotalFlightTime,
       SUM(IF(YEAR(dtEngineStart) > 1 AND YEAR(dtEngineEnd) > 1 AND dtEngineEnd > dtEngineStart, TIME_TO_SEC(TIMEDIFF(dtEngineEnd, dtEngineStart)) / 3600.0, 0)) AS TotalEngineTime,
       SUM(IF(HobbsEnd > 0 AND HobbsStart > 0 AND HobbsEnd - HobbsStart > 0, HobbsEnd - HobbsStart, 0)) AS TotalHobbs,"/>
  
  <!-- Base query for getting user totals -->
  <add key="TotalsQuery"
       value="SELECT COALESCE(l.Text, CatClassDisplay) AS CatClassDisplay,
         cc.idCatClass,
         cc.CatClass,
         f.idmodel,
         f.typename,
         f.ModelDisplay,
         f.Family,
         f.FamilyDisplay,
         COUNT(DISTINCT f.idFlight) AS numFlights,
         {0}
         SUM(ROUND(crosscountry*?qf))/?qf AS XCountry,
         SUM(ROUND(night*?qf))/?qf AS Night,
         SUM(ROUND(imc*?qf))/?qf AS IMC,
         SUM(ROUND(simulatedinstrument*?qf))/?qf AS SimulatedInstrument,
         SUM(ROUND(dualReceived*?qf))/?qf AS Dualtime,
         SUM(ROUND(cfi*?qf))/?qf AS cfi,
         SUM(ROUND(PIC*?qf))/?qf AS PIC,
         SUM(ROUND(SIC*?qf))/?qf AS SIC,
         SUM(ROUND(totalFlightTime*?qf))/?qf AS Total,
         SUM(cLandings) AS cLandings,
         SUM(cNightLandings) AS cNightLandings,
         SUM(cFullStopLandings) AS cFullStopLandings,
         SUM(cInstrumentApproaches) AS cApproaches,
         SUM(ROUND(groundSim*?qf))/?qf AS GroundSim
         FROM {1} f
         INNER JOIN CategoryClass cc ON f.CatClassOverride=cc.idCatClass
         LEFT JOIN loctext l ON (l.idTableID=1 AND l.idItemID=cc.idCatClass AND l.LangID=?lang)
         GROUP BY {2}" />
  
  <!--Subquery for getting subtotals by model type -->
  <add key="TotalsByModelType" value="SELECT SUM(ROUND(PIC*?qf))/?qf AS PIC, SUM(ROUND(SIC*?qf))/?qf AS SIC, SUM(ROUND(totalFlightTime * ?qf))/?qf AS TotalTime FROM {0} WHERE {1}" />
  
  <!-- Subquery for totalling custom properties -->
  <add key="TotalsCustomProperties"
        value="SELECT
          sum(fp.intvalue) AS intTotal,
          sum(ROUND(fp.decValue*?qf))/?qf AS timeTotal,
          sum(fp.decValue) AS decTotal,
          cpt.*,
          cpt.Title AS LocTitle,
          cpt.FormatString AS LocFormatString,
          '' AS LocDescription, '' AS prevValues,
          0 AS isFavorite
          FROM flightproperties fp
          INNER JOIN custompropertytypes cpt ON fp.idPropType=cpt.idProptype
          INNER JOIN {0} f ON fp.idflight=f.idflight
          WHERE  (cpt.Type IN (0, 1, 2, 6)) AND ((cpt.Flags &amp; 0x2000) = 0) 
          GROUP BY fp.idPropType
          ORDER BY cpt.Title " />

  
  <!--Core aircraft query - returns all the right fields.  Replace {0} with additional join constraints and/or WHERE clause.-->
  <add key="AircraftForUserCore"
       value ="SELECT DISTINCT 
         aircraft.*, 
         models.*, 
		 IF (aircraft.Tailnumber LIKE '#%', CONCAT('#', models.model), aircraft.TailNormal) AS sortKey,
         if (aircraft.InstanceType = 1, '', Concat(' (', aircraftinstancetypes.Description, ')')) as 'InstanceTypeDesc',
         TRIM(CONCAT(manufacturers.manufacturer, ' ', CONCAT(COALESCE(models.typename, ''), ' '), models.modelname)) AS 'ModelCommonName',
         {0} AS Flags,
         {1} AS DefaultImage,
         {2} AS UserNotes,
         {3} AS TemplateIDs
         FROM aircraft 
          INNER JOIN models ON aircraft.idmodel=models.idmodel 
          INNER JOIN manufacturers ON manufacturers.idManufacturer=models.idmanufacturer 
          INNER JOIN aircraftinstancetypes ON aircraft.InstanceType=aircraftinstancetypes.ID
          {4}
         ORDER BY sortKey ASC, Version ASC, aircraft.version ASC"
 />

  <!-- Get the maintenance log for an aircraft or user -->
  <add key="GetMaintenanceLog"
       value="SELECT m.idaircraft as idAircraft, m.Description as Description, m.Date as Date, m.User as User, m.Comment as Comment, aircraft.tailnumber as Tailnumber, users.FirstName as firstname, users.lastname as lastname
      FROM maintenancelog m
       INNER JOIN users ON (m.User = users.Username)
       INNER JOIN aircraft ON (m.idAircraft = aircraft.idaircraft)
      WHERE {0}
      ORDER BY m.Date desc, id desc;" />

  <!-- Retrieve the set of models that are used by a user -->
  <add key="CustomMakesForUser" value="SELECT m.*,
  CONCAT(m.model, ' (', Trim(Concat(mfg.manufacturer, ' ', m.modelname, ' ', m.typename)), ')') AS modelcommonname,
  mfg.manufacturer,
  categoryclass.CatClass as 'Category/Class'
FROM models m
  INNER JOIN aircraft ac ON m.idmodel=ac.idmodel
  INNER JOIN manufacturers mfg ON m.idmanufacturer = mfg.idManufacturer
  INNER JOIN useraircraft ua ON ua.idAircraft = ac.idAircraft
  INNER JOIN categoryclass ON categoryclass.idCatClass = m.idcategoryclass
WHERE ua.username=?UserName
GROUP BY idmodel ORDER BY modelcommonname" />

  
  <!-- Get all models in the system -->
  <add key="MakesAndModels" value="SELECT models.idmodel AS idmodel,
CONCAT(manufacturers.manufacturer, ' (', TRIM(CONCAT(models.model, IF(models.modelname='', '', CONCAT(' &quot;', models.modelname, '&quot;')))), ') - ', categoryclass.Catclass) AS MakeName
FROM models INNER JOIN manufacturers ON models.idmanufacturer = manufacturers.idManufacturer INNER JOIN categoryclass ON models.idcategoryclass=categoryclass.idcatclass
ORDER BY MakeName" />

  <!-- Get the properties used for a user, identifying previously used ones -->
  <add key="CustomPropsForUserQuery" value="SELECT cpt.*,
           COALESCE(l.Text, cpt.Title) AS LocTitle,
           COALESCE(l2.Text, cpt.FormatString) AS LocFormatString,
           COALESCE(l3.Text, cpt.Description) AS LocDescription,
           IF (usedProps.numflights IS NULL OR ((cpt.Flags &amp; 0x00100000) &lt;&gt; 0), 0, 1) AS IsFavorite,
           IF (((cpt.flags &amp; 0x02000000) = 0), usedProps.prevValues, null) AS PrevValues
FROM custompropertytypes cpt 
LEFT JOIN locText l ON (l.idTableID=2 AND l.idItemID=cpt.idPropType AND l.LangId=?langID)
LEFT JOIN locText l2 ON (l2.idTableID=3 AND l2.idItemID=cpt.idPropType AND l2.LangID=?LangID)
LEFT JOIN locText l3 ON (l3.idTableID=4 AND l3.idItemID=cpt.idPropType AND l3.LangID=?LangID)
LEFT JOIN
  (SELECT fp.idPropType AS idPropType, COUNT(f.idFlight) AS numFlights, GROUP_CONCAT(DISTINCT IF(fp.stringvalue='', NULL, fp.stringvalue) SEPARATOR '\t') AS prevValues
  FROM flightproperties fp INNER JOIN flights f ON fp.idflight=f.idFlight
  WHERE f.username=?uname {0}
  GROUP BY fp.idproptype) AS usedProps ON usedProps.idPropType=cpt.idPropType
ORDER BY IsFavorite DESC, IF(SortKey='', Title, SortKey) ASC" />
  
  
  <!-- Base query for 8710 form-->
  <add key="8710ForUserQuery" value="SELECT
  InstanceTypeID,
  Category,
  Class,
  CatClass,
  IF(InstanceTypeID = 1, SUM(ROUND(TotalTime*?qf))/?qf, SUM(ROUND(GroundSim*?qf))/?qf) AS TotalTime,
  SUM(ROUND(InstructionReceived*?qf))/?qf AS InstructionReceived,
  IF(InstanceTypeID = 1, SUM(ROUND(SoloTime*?qf))/?qf, 0) AS SoloTime,
  IF(InstanceTypeID = 1, SUM(ROUND(PIC*?qf))/?qf, 0) AS PIC,
  IF(InstanceTypeID = 1, SUM(ROUND(SIC*?qf))/?qf, 0) AS SIC,
  IF(InstanceTypeID = 1, SUM(ROUND(XC*?qf))/?qf, 0) AS CrossCountry,
  IF(InstanceTypeID = 1, SUM(ROUND(XCDual*?qf))/?qf, 0) AS CrossCountryDual,
  IF(InstanceTypeID = 1, SUM(ROUND(XCSolo*?qf))/?qf, 0) AS CrossCountrySolo,
  IF(InstanceTypeID = 1, SUM(ROUND(XCPIC*?qf))/?qf, 0) AS CrossCountryPIC,
  IF(InstanceTypeID = 1, SUM(ROUND(XCSIC*?qf))/?qf, 0) AS CrossCountrySIC,
  SUM(ROUND(IMC*?qf))/?qf AS InstrumentTime,
  IF(InstanceTypeID IN (1,4), SUM(ROUND(NightDual*?qf))/?qf, 0) AS NightDual,
  IF(InstanceTypeID IN (1,4), SUM(NightLandings), 0) AS NightLandings,
  IF(InstanceTypeID IN (1,4), SUM(NightTakeoffs), 0) AS NightTakeoffs,
  IF(InstanceTypeID = 1, SUM(ROUND(NightPIC*?qf))/?qf, 0) AS NightPIC,
  IF(InstanceTypeID = 1, SUM(ROUND(NightSIC*?qf))/?qf, 0) AS NightSIC,
  IF(InstanceTypeID IN (1,4), SUM(NightPICLandings), 0) AS NightPICLandings,
  IF(InstanceTypeID IN (1,4), SUM(NightSICLandings), 0) AS NightSICLandings,
  IF(InstanceTypeID IN (1,4), SUM(NightPICTakeoffs), 0) AS NightPICTakeoffs,
  IF(InstanceTypeID IN (1,4), SUM(NightSICTakeoffs), 0) AS NightSICTakeoffs,
  IF(InstanceTypeID = 1, SUM(AeroTows), 0) AS AeroTows,
  IF(InstanceTypeID = 1, SUM(WinchedLaunches), 0) AS WinchedLaunches,
  IF(InstanceTypeID = 1, SUM(SelfLaunches), 0) AS SelfLaunches,
  SUM(flightCount) AS NumberOfFlights
FROM
(SELECT
    categoryclass.idcatclass AS CatClassID,
		categoryclass.Class,
    categoryclass.CatClass,
    ait.ID AS InstanceTypeID,
    ait.Description AS InstanceTypeDescription,
    IF (ait.ID = 1, categoryclass.Category, CONCAT(categoryclass.Category, ' - ', ait.Description)) AS Category,
    TRIM(CONCAT(models.model, ', ', manufacturers.Manufacturer, ' ',  models.typename, ' ', models.modelname)) AS ModelDisplay,
    IF (aircraft.Tailnumber LIKE '#%', CONCAT('(', models.model, ')'), aircraft.tailnumber) AS 'TailNumberDisplay',
    aircraft.TailNumber AS RawTailNumber,
    flights.route,
    flights.comments,
    GROUP_CONCAT(DISTINCT CONCAT(fdc.StringValue, ' ', cpt.Title) SEPARATOR ' ') AS CustomProperties,
    flights.totalFlightTime AS TotalTime,
    flights.dualReceived AS InstructionReceived,
    IF (fpSolo.decValue IS NULL, 0, fpSolo.decValue) AS SoloTime,
    flights.pic AS PIC,
    flights.cficomment,
    flights.cfiname,
    useraircraft.privatenotes AS AircraftPrivateNotes,
    IF (flights.sic IS NULL, 0, flights.sic) AS SIC,
    flights.crosscountry AS XC,
    LEAST(flights.crosscountry, flights.dualReceived) AS XCDual,
    LEAST(flights.crosscountry, IF(fpSolo.decValue IS null, 0, fpSolo.decValue)) AS XCSolo,
    LEAST(flights.crosscountry, flights.PIC) AS XCPIC,
    LEAST(flights.crosscountry, IF(flights.SIC IS NULL, 0, flights.SIC)) AS XCSIC,
    imc + simulatedInstrument AS IMC, 
    flights.GroundSim,
    LEAST(flights.night, flights.dualReceived) AS NightDual,
    flights.cNightLandings AS NightLandings,
    models.*,
    IF(models.family is null OR models.family='', models.model, models.family) AS FamilyDisplay,
    IF (fpNightTakeoff.intValue IS NULL, 0, fpNightTakeoff.intValue) AS NightTakeoffs,
    LEAST(flights.night, flights.PIC) AS NightPIC,
    LEAST(flights.night, IF(flights.SIC IS NULL, 0, flights.SIC)) AS NightSIC,
    IF (flights.PIC > 0, flights.cNightLandings, 0) AS NightPICLandings, 
    IF (flights.SIC > 0, flights.cNightLandings, 0) AS NightSICLandings,
    IF (flights.PIC > 0 AND fpNightTakeoff.intValue IS NOT NULL, fpNightTakeoff.intValue, 0) AS NightPICTakeoffs,
    IF (flights.SIC > 0 AND fpNightTakeoff.intValue IS NOT NULL, fpNightTakeoff.intValue, 0) AS NightSICTakeoffs,
    IF(categoryclass.idcatclass IN (5, 10, 11, 12) AND fpAeroTow.intValue IS NOT NULL, fpAeroTow.intValue, 0) AS AeroTows,
    IF(categoryclass.idcatclass IN (5, 10, 11, 12) AND fpWinchedLaunch.intValue IS NOT NULL, fpWinchedLaunch.intValue, 0) AS WinchedLaunches,
    IF(categoryclass.idcatclass IN (5, 10, 11, 12) AND fpSelfLaunch.intValue IS NOT NULL, fpSelfLaunch.intValue, 0) AS SelfLaunches,
    IF(categoryclass.idcatclass IN (5, 10, 11, 12), flights.cLandings, 1) AS flightCount
  FROM flights
  INNER JOIN aircraft ON flights.idaircraft=aircraft.idaircraft
  INNER JOIN models ON aircraft.idmodel=models.idmodel
  INNER JOIN categoryclass ON IF(flights.idCatClassOverride = 0, models.idcategoryclass, flights.idcatclassoverride)=categoryclass.idcatclass
  INNER JOIN manufacturers ON manufacturers.idManufacturer=models.idmanufacturer 
  INNER JOIN AircraftInstanceTypes ait ON ait.ID = aircraft.InstanceType
  INNER JOIN useraircraft ON (flights.username=useraircraft.username AND flights.idaircraft = useraircraft.idaircraft)
  LEFT JOIN flighttelemetry ft ON (flights.idflight=ft.idflight)
  LEFT JOIN flightproperties fpSolo ON (fpSolo.idflight = flights.idflight AND fpSolo.idPropType=77)
  LEFT JOIN flightproperties fpNightTakeoff ON (fpNightTakeOff.idFlight = flights.idFlight AND fpNightTakeoff.idPropType=73)
  LEFT JOIN flightproperties fpAeroTow ON (fpAeroTow.idFlight = flights.idFlight AND fpAeroTow.idPropType=222)
  LEFT JOIN flightproperties fpSelfLaunch ON (fpSelfLaunch.idFlight = flights.idFlight AND fpSelfLaunch.idPropType=227)
  LEFT JOIN flightproperties fpWinchedLaunch ON (fpWinchedLaunch.idFlight = flights.idFlight AND fpWinchedLaunch.idPropType IN (226, 341, 349))
  LEFT JOIN FlightProperties fdc ON flights.idFlight=fdc.idFlight
  LEFT JOIN custompropertytypes cpt ON fdc.idPropType=cpt.idPropType
  WHERE {0}
  GROUP BY flights.idFlight, models.idmodel
  {1}) f
GROUP BY {2}
ORDER BY f.InstanceTypeID, f.CatClassID;" />
  
  <!-- Rollup grid -->
  <add key ="RollupGridQuery" value ="SELECT 
    familydisplay,
    ModelDisplay,
    IF(InstanceTypeID=1, SUM(ROUND(PIC * ?qf))/?qf, 0) AS PIC,
    IF(InstanceTypeID=1, SUM(ROUND(SIC * ?qf))/?qf, 0) AS SIC,
    SUM(ROUND(dualReceived * ?qf))/?qf AS DualReceived,
    IF(instancetypeid=1, SUM(ROUND(IF(fTurbine = 1, PIC, 0) * ?qf))/?qf, 0) AS TurboPropPIC,
    IF(instancetypeid=1, SUM(ROUND(IF(fTurbine = 1, SIC, 0) * ?qf))/?qf, 0) AS TurboPropSIC,
    IF(instancetypeid=1, SUM(ROUND(IF(fTurbine = 2, PIC, 0) * ?qf))/?qf, 0) AS JetPIC,
    IF(instancetypeid=1, SUM(ROUND(IF(fTurbine = 2, SIC, 0) * ?qf))/?qf, 0) AS JetSIC,
    SUM(IF(instancetypeid=1 and f.CatClassID in (2, 4), ROUND(PIC * ?qf) / ?qf, 0)) AS MultiPIC,
    SUM(IF(instancetypeid=1 and f.CatClassID in (2, 4), ROUND(SIC * ?qf) / ?qf, 0)) AS MultiSIC,
    IF(instancetypeid=1, SUM(ROUND(EngineerTime * ?qf))/?qf, 0) AS flightengineer,
    IF(instancetypeid=1, SUM(ROUND(MilitaryTime * ?qf))/?qf, 0) AS MilTime,
    SUM(ROUND(CFI * ?qf))/?qf AS CFI,
    IF(instancetypeid=1, SUM(ROUND(Night * ?qf))/?qf, 0) AS Night,
    IF(instancetypeid=1, SUM(ROUND(IMC * ?qf))/?qf, 0) AS IMC,
    SUM(ROUND(SimulatedInstrument * ?qf))/?qf AS SimIMC,
    IF(instancetypeid=1, SUM(ROUND(crossCountry * ?qf))/?qf, 0) AS XC,
    SUM(ROUND(IF(instancetypeid=1, TotalFlightTime, 0) * ?qf))/?qf AS Total,
    SUM(ROUND(IF(instancetypeid=1 and f.date > DATE_SUB(NOW(), INTERVAL 1 YEAR), TotalFlightTime, 0) * ?qf))/?qf AS _12MonthTotal,
    SUM(ROUND(IF(instancetypeid=1 and f.date > DATE_SUB(NOW(), INTERVAL 2 YEAR), TotalFlightTime, 0) * ?qf))/?qf AS _24MonthTotal,
    SUM(IF(iscertifiedLanding &lt;&gt; 0, cLandings, 0)) AS landings,
    SUM(IF(iscertifiedIFR &lt;&gt; 0, cInstrumentApproaches, 0)) AS approaches,
    SUM(IF(iscertifiedIFR &lt;&gt; 0 and f.date > DATE_SUB(NOW(), Interval 6 month), cInstrumentApproaches, 0)) as _6MonthApproaches,
    SUM(IF(iscertifiedIFR &lt;&gt; 0 and f.date > DATE_SUB(NOW(), Interval 12 month), cInstrumentApproaches, 0)) as _12MonthApproaches,
    MAX(f.date) AS LastFlight
FROM (SELECT 
        flights.*,
        categoryclass.idcatclass AS CatClassID,
        categoryclass.Class,
        categoryclass.CatClass,
        ait.IsCertifiedIFR,
        ait.IsCertifiedLanding,
        ait.ID AS InstanceTypeID,
        ait.Description AS InstanceTypeDescription,
        IF(ait.ID = 1, categoryclass.Category, CONCAT(categoryclass.Category, ' - ', ait.Description)) AS Category,
        IF(ait.ID = 1, IF(models.family = '', models.model, models.family), CONCAT('(', ait.Description, ')')) AS FamilyDisplay,
        TRIM(CONCAT(manufacturers.manufacturer, ' - ', IF(models.family = '', models.model, models.family))) AS ModelDisplay,
        IF(aircraft.Tailnumber LIKE '#%',
            CONCAT('(', models.model, ')'),
            aircraft.tailnumber) AS 'TailNumberDisplay',
        aircraft.TailNumber AS RawTailNumber,
        useraircraft.privatenotes AS AircraftPrivateNotes,
        GROUP_CONCAT(DISTINCT CONCAT(fdc.StringValue, ' ', cpt.Title)
            SEPARATOR ' ') AS CustomProperties,
        models.*,
        fpEng.decValue AS EngineerTime,
        fpMil.decValue AS MilitaryTime
    FROM
        flights
            INNER JOIN aircraft ON flights.idaircraft = aircraft.idaircraft
            INNER JOIN models ON aircraft.idmodel = models.idmodel
            INNER JOIN categoryclass ON (IF(flights.idCatClassOverride = 0, models.idcategoryclass, flights.idcatclassoverride) = categoryclass.idcatclass)
            INNER JOIN manufacturers ON manufacturers.idManufacturer = models.idmanufacturer
            INNER JOIN AircraftInstanceTypes ait ON ait.ID = aircraft.InstanceType
            INNER JOIN useraircraft ON (flights.username = useraircraft.username AND flights.idaircraft = useraircraft.idaircraft) 
            LEFT JOIN flighttelemetry ft ON (flights.idflight = ft.idflight)
            LEFT JOIN FlightProperties fpEng ON fpEng.idflight = flights.idflight AND fpEng.idproptype = 257
            LEFT JOIN flightproperties fpMil ON fpMil.idflight = flights.idflight AND fpMil.idproptype = 90
            LEFT JOIN FlightProperties fdc ON flights.idFlight = fdc.idFlight
            LEFT JOIN custompropertytypes cpt ON fdc.idPropType = cpt.idPropType
      WHERE
        {0}
    GROUP BY flights.idFlight , models.idmodel {1}
    ORDER BY familyDisplay asc) f
GROUP BY f.familyDisplay WITH ROLLUP"/>

  <!-- Get custom currencies for user -->
  <add key="CustomCurrencyForUserQuery" value="SELECT cc.*, 
group_concat(CAST(ac.idaircraft AS CHAR(10)) SEPARATOR ',') AS AircraftRestriction,
group_concat(ac.TailNumber SEPARATOR ', ') AS AircraftDisplay,
group_concat(CAST(models.idmodel AS CHAR(10)) SEPARATOR ',') AS ModelsRestriction,
group_concat(models.model SEPARATOR ', ') AS ModelsDisplay,
group_concat(CAST(cpt.idPropType AS CHAR(10)) SEPARATOR ', ') AS PropertyRestriction,
group_concat(cpt.Title SEPARATOR ', ') AS PropertyDisplay,
catclass.catclass AS CatClassDisplay
FROM customcurrency cc
LEFT JOIN custcurrencyref ccf ON ccf.idCurrency=cc.idCurrency
LEFT JOIN aircraft ac ON (ccf.value=ac.idaircraft AND ccf.type=0)
LEFT JOIN models ON (ccf.value= models.idmodel AND ccf.type=1)
LEFT JOIN custompropertytypes cpt ON (ccf.value = cpt.idProptype AND ccf.type=2)
LEFT JOIN categoryclass catclass ON cc.catclassRestriction=catclass.idCatClass
WHERE cc.username=?uName
GROUP BY cc.idCurrency
ORDER BY cc.name ASC;" />
  
  
  <!-- The following keys specify the root directories for images where thumbnails (or raw telemetry) is stored -->
  <add key="AircraftPixDir" value="~/images/aircraft/id/" />
  <add key="FlightsPixDir" value="~/images/flights/" />
  <add key="BasicMedDir" value="~/images/basicmed/" />
  <add key="TelemetryDir" value="~/images/telemetry" />
  <add key="EndorsementsPixDir" value="~/images/Endorsements/" />
  <add key="OfflineEndorsementsPixDir" value="~/images/OfflineEndorsements/" />
  
  <!-- Set "UseOOF" to "yes" to auto-respond to ContactMe requests -->
  <add key="UseOOF" value="no" />
  
  <!-- Set "UseImageDB" to "yes" to use the DB to track images.-->
  <add key="UseImageDB" value="yes" />
</appSettings>
