using MyFlightbook.Telemetry;
using Newtonsoft.Json;
using System;
using System.Globalization;
using System.Collections.Generic;
using System.Text;

/******************************************************
 * 
 * Copyright (c) 2022-2025 MyFlightbook LLC
 * Contact myflightbook-at-gmail.com for more information
 *
*******************************************************/

// Implements import from Leon flight scheduling
// See https://bitbucket.org/leondevteam/api-documentation/src/99457e945a56eae44bbcc70a0211399fb306e4a5/authentication/OAuthCodeGrant.md,
// and http://api-schema-doc.s3-website-eu-west-1.amazonaws.com/reservationstatus.doc.html
// Schema described at http://api-schema-doc.s3-website-eu-west-1.amazonaws.com/
namespace MyFlightbook.ImportFlights.Leon
{
    #region Flight object from Leon
    // Generated by Xamasoft JSON Class Generator
    // http://www.xamasoft.com/json-class-generator
    [Serializable]
    public class LeonAirportCode
    {

        [JsonProperty("mostDescriptive")]
        public string MostDescriptive { get; set; } = string.Empty;
    }

    [Serializable]
    public class LeonPerson
    {

        [JsonProperty("surname")]
        public string Surname { get; set; } = string.Empty;

        [JsonProperty("code")]
        public string Code { get; set; } = string.Empty;
    }

    [Serializable]
    public class LeonLoggedUser
    {

        [JsonProperty("logbook")]
        public LeonFlightEntry[] Logbook { get; set; } = Array.Empty<LeonFlightEntry>();

        [JsonProperty("blockHours")]
        public string BlockHours { get; set; }
    }

    [Serializable]
    public class LeonFlightData
    {

        [JsonProperty("loggedUser")]
        public LeonLoggedUser LoggedUser { get; set; }
    }

    [Serializable]
    public class LeonFlightRoot
    {

        [JsonProperty("data")]
        public LeonFlightData Data { get; set; }
    }

    [Serializable]
    public class JourneyLogApproachCount
    {
        [JsonProperty("approach")]
        public string ApproachDescription { get; set; } = string.Empty;

        [JsonProperty("count")]
        public int ApproachCount { get; set; }
    }

    [Serializable]
    public class LeonFlightEntry : ExternalFormat
    {
        public string Username { get; set; } = string.Empty;

        #region Generated JSON properties
        [JsonProperty("flightDate")]
        public DateTime FlightDate { get; set; } = DateTime.Now.Date;

        [JsonProperty("flightNumber")]
        public string FlightNumber { get; set; } = string.Empty;

        [JsonProperty("dutyStartTime")]
        public DateTime? DutyStartTime { get; set; }

        [JsonProperty("dutyEndTime")]
        public DateTime? DutyEndTime { get; set; }

        [JsonProperty("actualDepartureTime")]
        public DateTime? ActualDepartureTime { get; set; }

        [JsonProperty("actualArrivalTime")]
        public DateTime? ActualArrivalTime { get; set; }

        [JsonProperty("takeoffTime")]
        public DateTime? TakeoffTime { get; set; }

        [JsonProperty("landingTime")]
        public DateTime? LandingTime { get; set; }

        [JsonProperty("departureAirportCode")]
        public LeonAirportCode DepartureAirportCode { get; set; }

        [JsonProperty("destinationAirportCode")]
        public LeonAirportCode DestinationAirportCode { get; set; }

        [JsonProperty("aircraftRegistration")]
        public string AircraftRegistration { get; set; } = string.Empty;

        [JsonProperty("aircraftType")]
        public string AircraftType { get; set; } = string.Empty;

        [JsonProperty("commander")]
        public string Commander { get; set; } = string.Empty;

        [JsonProperty("pic")]
        public LeonPerson Pic { get; set; }

        [JsonProperty("sic")]
        public LeonPerson Sic { get; set; }

#pragma warning disable CA1507 // Use nameof to express symbol names
        [JsonProperty("totalFlightTime")]
        public string totalFlightTime { get; set; } = string.Empty;
#pragma warning restore CA1507 // Use nameof to express symbol names

        [JsonProperty("durationOfFlightTime")]
        public string DurationOfFlightTime { get; set; } = string.Empty;

        [JsonProperty("ifrTime")]
        public string IfrTime { get; set; } = string.Empty;

        [JsonProperty("nightFlightTime")]
        public string NightFlightTime { get; set; } = string.Empty;

        [JsonProperty("multiPilotFlightTime")]
        public string MultiPilotFlightTime { get; set; } = string.Empty;

        [JsonProperty("picTime")]
        public string PicTime { get; set; } = string.Empty;

        [JsonProperty("picNightTime")]
        public string PicNightTime { get; set; } = string.Empty;

        [JsonProperty("sicTime")]
        public string SicTime { get; set; } = string.Empty;

        [JsonProperty("sicNightTime")]
        public string SicNightTime { get; set; } = string.Empty;

        [JsonProperty("soloFlightTime")]
        public string SoloFlightTime { get; set; } = string.Empty;

        [JsonProperty("dualPilotTimeReceived")]
        public string DualPilotTimeReceived { get; set; } = string.Empty;

        [JsonProperty("dualPilotTimeGiven")]
        public string DualPilotTimeGiven { get; set; } = string.Empty;

        [JsonProperty("dayTakeoffCount")]
        public int DayTakeoffCount { get; set; }

        [JsonProperty("nightTakeoffCount")]
        public int NightTakeoffCount { get; set; }

        [JsonProperty("dayLandingCount")]
        public int DayLandingCount { get; set; }

        [JsonProperty("nightLandingCount")]
        public int NightLandingCount { get; set; }

        [JsonProperty("approachList")]
        public JourneyLogApproachCount[] ApproachList { get; set; } = Array.Empty<JourneyLogApproachCount>();

        [JsonProperty("approachTypeList")]
        public Dictionary<string, string>[] ApproachTypeList { get; set; } = Array.Empty<Dictionary<string, string>>();
        #endregion

        protected string ApproachesFromApproachTypeList()
        {
            if (ApproachTypeList == null)
                return string.Empty;

            StringBuilder sb = new StringBuilder();

            foreach (Dictionary<string, string> d in ApproachTypeList)
            {
                if (d.TryGetValue("count", out string s))
                {
                    if (int.TryParse(s, NumberStyles.Integer, CultureInfo.InvariantCulture, out int cApproaches))
                    sb.AppendFormat(CultureInfo.CurrentCulture, "{0} ", cApproaches);
                }
                if (d.TryGetValue("approachType", out string sType))
                    sb.AppendFormat(CultureInfo.CurrentCulture, "{0} ", sType);
            }

            return sb.ToString().Trim();
        }

        private static void AutoComplete(LogbookEntry le)
        {
            // Issue #939: autofill cross-country/night, when possible.
            AutoFillOptions afo = AutoFillOptions.DefaultOptionsForUser(le.User);
            if (afo != null && le.CrossCountry == 0.0M)
            {
                if (le.Nighttime == 0.0M)
                {
                    using (FlightData fd = new FlightData())
                        fd.AutoFill(le, afo);
                }
                else  // just do xc time based on part 121 xc
                {
                    CannedQuery fq = new CannedQuery() { Distance = FlightQuery.FlightDistance.NonLocalOnly };
                    if (fq.IsAirportMatch(le))
                        le.CrossCountry = le.TotalFlightTime;
                }
            }
        }

        public override LogbookEntry ToLogbookEntry()
        {
            // Always return pending flights
            PendingFlight pf = new PendingFlight()
            {
                Date = FlightDate, 
                Route = JoinStrings(new string[] { DepartureAirportCode.MostDescriptive, DestinationAirportCode.MostDescriptive }),
                FlightStart = TakeoffTime ?? DateTime.MinValue,
                FlightEnd = LandingTime ?? DateTime.MinValue,
                TailNumDisplay = AircraftRegistration ?? String.Empty,
                ModelDisplay = AircraftType ?? String.Empty,
                TotalFlightTime = totalFlightTime == null ? 0 : totalFlightTime.SafeParseDecimal(),
                Nighttime = NightFlightTime == null ? 0 : NightFlightTime.SafeParseDecimal(),
                PIC =  PicTime == null ? 0 : PicTime.SafeParseDecimal(),
                SIC = SicTime == null ? 0 : SicTime.SafeParseDecimal(),
                Dual =  DualPilotTimeReceived == null ? 0 : DualPilotTimeReceived.SafeParseDecimal(),
                CFI =  DualPilotTimeGiven == null ? 0 : DualPilotTimeGiven.SafeParseDecimal(),
                FullStopLandings = DayLandingCount,
                NightLandings = NightLandingCount,
                Approaches = ApproachList.Length,
                User = Username
            };

            Aircraft ac = BestGuessAircraftID(Username, pf.TailNumDisplay);

            List<CustomFlightProperty> lst = new List<CustomFlightProperty>()
            {
                CustomFlightProperty.PropertyWithValue(CustomPropertyType.KnownProperties.IDPropFlightNumber, FlightNumber),
                CustomFlightProperty.PropertyWithValue(CustomPropertyType.KnownProperties.IDPropDutyStart, DutyStartTime ?? DateTime.MinValue, true),
                CustomFlightProperty.PropertyWithValue(CustomPropertyType.KnownProperties.IDPropDutyEnd, DutyEndTime ?? DateTime.MinValue, true),
                CustomFlightProperty.PropertyWithValue(CustomPropertyType.KnownProperties.IDBlockOut, ActualDepartureTime ?? DateTime.MinValue, true),
                CustomFlightProperty.PropertyWithValue(CustomPropertyType.KnownProperties.IDBlockIn, ActualArrivalTime ?? DateTime.MinValue, true),
                CustomFlightProperty.PropertyWithValue(CustomPropertyType.KnownProperties.IDPropNameOfPIC, Pic == null || String.IsNullOrEmpty(Pic.Surname) ? Commander : Pic.Surname),
                CustomFlightProperty.PropertyWithValue(CustomPropertyType.KnownProperties.IDPropNameOfSIC, Sic == null || Sic.Surname == null ? string.Empty : Sic.Surname),
                CustomFlightProperty.PropertyWithValue(CustomPropertyType.KnownProperties.IDPropMultiPilotTime, MultiPilotFlightTime == null ? 0 : MultiPilotFlightTime.SafeParseDecimal()),
                CustomFlightProperty.PropertyWithValue(CustomPropertyType.KnownProperties.IDPropSolo, SoloFlightTime == null ? 0 : SoloFlightTime.DecimalFromHHMM()),
                CustomFlightProperty.PropertyWithValue(CustomPropertyType.KnownProperties.IDPropNightTakeoff, NightTakeoffCount),
                CustomFlightProperty.PropertyWithValue(CustomPropertyType.KnownProperties.IDPropIFRTime, IfrTime == null ? 0 : IfrTime.SafeParseDecimal()),
                CustomFlightProperty.PropertyWithValue(CustomPropertyType.KnownProperties.IDPropApproachName, ApproachesFromApproachTypeList())
            };

            if (ac != null)
            {
                pf.AircraftID = ac.AircraftID;
                if (ac.IsAnonymous)
                    lst.Add(CustomFlightProperty.PropertyWithValue(CustomPropertyType.KnownProperties.IDPropAircraftRegistration, pf.TailNumDisplay));
            }

            pf.CustomProperties.SetItems(lst);

            AutoComplete(pf);

            return pf;
        }

        public static IEnumerable<LeonFlightEntry> FromLeonRootJSON(String szJSON)
        {
            if (szJSON == null)
                throw new ArgumentNullException(nameof(szJSON));

            LeonFlightRoot root = JsonConvert.DeserializeObject<LeonFlightRoot>(szJSON);
            return root.Data.LoggedUser.Logbook;
        }
    }
    #endregion

    [Serializable]
    public class LeonTimeInterval
    {
        public DateTime? start { get; set; }
        public DateTime? end { get; set; }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            if (start.HasValue)
                sb.AppendFormat(CultureInfo.InvariantCulture, "start: \"{0}\" ", start.Value.YMDString());
            if (end.HasValue)
                sb.AppendFormat(CultureInfo.InvariantCulture, "end: \"{0}\" ", end.Value.YMDString());
            return sb.ToString();
        }
    }

    public class LeonQuery
    {
        #region properties
        protected LeonTimeInterval timeInterval;
        #endregion

        public LeonQuery(DateTime? dtStart, DateTime? dtEnd)
        {
            timeInterval = new LeonTimeInterval() { start = dtStart, end = dtEnd };
        }

        public override string ToString()
        {
            // this is a hack, but should do the trick
            return String.Format(CultureInfo.InvariantCulture, @"{{
  loggedUser {{
    logbook(timeInterval: {{ {0} }}, stripAircraftRegistrationSeparator: false) {{
      flightDate
      flightNumber
      dutyStartTime
      dutyEndTime
      actualDepartureTime
      actualArrivalTime
      takeoffTime
      landingTime
      departureAirportCode {{mostDescriptive}}
      destinationAirportCode {{mostDescriptive}}
      aircraftRegistration
      aircraftType
      commander
      pic {{surname}}
      sic {{surname}}
      totalFlightTime
      durationOfFlightTime
      ifrTime
      nightFlightTime
      multiPilotFlightTime
      picTime
      picNightTime
      sicTime
      sicNightTime
      soloFlightTime
      dualPilotTimeReceived
      dualPilotTimeGiven
      dayTakeoffCount
      nightTakeoffCount
      dayLandingCount
      nightLandingCount
      approachList {{ 
        approach
        count }}
      approachTypeList {{
        approachType
        count }}
    }}
  }}
}}", timeInterval.ToString());
        }
    }

    public class LeonOAuth
    {
        public const string TokenSessionKey = "LeonTokenSessionKey";
    }
}
