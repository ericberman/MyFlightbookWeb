<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Account2FADisabled" xml:space="preserve">
    <value>Two-factor authentication has been disabled</value>
  </data>
  <data name="Account2FAEnabled" xml:space="preserve">
    <value>Two-factor authentication has been enabled</value>
  </data>
  <data name="AccountHeadshotTooBig" xml:space="preserve">
    <value>That image for a head shot is too large.  Please try using a smaller image.</value>
  </data>
  <data name="AccountPasswordChange" xml:space="preserve">
    <value>Change Password</value>
  </data>
  <data name="AccountPasswordConfirmNew" xml:space="preserve">
    <value>Confirm New Password</value>
  </data>
  <data name="AccountPasswordCurrent" xml:space="preserve">
    <value>Current Password</value>
  </data>
  <data name="AccountPasswordNew" xml:space="preserve">
    <value>New Password</value>
  </data>
  <data name="AccountPasswordSuccess" xml:space="preserve">
    <value>Password successfully changed</value>
  </data>
  <data name="AccountQAChange" xml:space="preserve">
    <value>Change Security Question</value>
  </data>
  <data name="AccountQAChangeSuccess" xml:space="preserve">
    <value>Security question and answer successfully changed</value>
  </data>
  <data name="AccountQACurrentQuestion" xml:space="preserve">
    <value>Current question: </value>
  </data>
  <data name="AccountQAMakeUpOwn" xml:space="preserve">
    <value>(Make up your own secret question)</value>
  </data>
  <data name="AccountQANewAnswer" xml:space="preserve">
    <value>New Security Answer</value>
  </data>
  <data name="AccountQANewQuestion" xml:space="preserve">
    <value>New Security Question</value>
  </data>
  <data name="AccountQAPasswordPrompt" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="BasicMedConfirmDeleteImage" xml:space="preserve">
    <value>Are you sure you want to delete this image or PDF?  It CANNOT be undone!</value>
  </data>
  <data name="CloudAhoyName" xml:space="preserve">
    <value>CloudAhoy</value>
  </data>
  <data name="CloudStorageAppendDate" xml:space="preserve">
    <value>Append date to filename (backups on different days are to different files)</value>
  </data>
  <data name="CloudStorageDropboxName" xml:space="preserve">
    <value>Dropbox</value>
  </data>
  <data name="CloudStorageGoogleDriveName" xml:space="preserve">
    <value>GoogleDrive</value>
  </data>
  <data name="CloudStorageGroupByMonth" xml:space="preserve">
    <value>Group backups in separate folders by month</value>
  </data>
  <data name="CloudStorageHeader" xml:space="preserve">
    <value>Cloud Backup</value>
  </data>
  <data name="CloudStorageOneDriveName" xml:space="preserve">
    <value>OneDrive</value>
  </data>
  <data name="CloudStorageOverwrite" xml:space="preserve">
    <value>Use a common filename (each backup overwrites any prior backup)</value>
  </data>
  <data name="CloudStoragePickDefault" xml:space="preserve">
    <value>Default cloud provider: </value>
  </data>
  <data name="CustCurrencyDescription" xml:space="preserve">
    <value>You can define your own currency rules (can be useful for FBO or insurance rules)</value>
  </data>
  <data name="DebriefHeader" xml:space="preserve">
    <value>Debriefing Services</value>
  </data>
  <data name="DecimalPref1Decimal" xml:space="preserve">
    <value>Decimal, 1 digit after decimal</value>
  </data>
  <data name="DecimalPref2Decimal" xml:space="preserve">
    <value>Decimal, 2 digits after decimal</value>
  </data>
  <data name="DecimalPrefAdaptive" xml:space="preserve">
    <value>Decimal, 1 or 2 digits after decimal</value>
  </data>
  <data name="DecimalPrefHHMM" xml:space="preserve">
    <value>Hours and minutes (HH:MM)</value>
  </data>
  <data name="DecimalPrefPrompt" xml:space="preserve">
    <value>Format for times</value>
  </data>
  <data name="DecimalPrefSample1" xml:space="preserve">
    <value>70 Minutes displays as...</value>
  </data>
  <data name="DecimalPrefSample2" xml:space="preserve">
    <value>72 Minutes displays as...</value>
  </data>
  <data name="DonateCrypto" xml:space="preserve">
    <value>Prefer alternative means of payment?  %APP_NAME% now accepts *Bitcoin*, *Ethereum*, *Venmo*, and *Zelle*</value>
  </data>
  <data name="DonateCryptoContact" xml:space="preserve">
    <value>Contact us for details.</value>
  </data>
  <data name="DonateHeader" xml:space="preserve">
    <value>Donations</value>
  </data>
  <data name="DonateNoDonations" xml:space="preserve">
    <value>You have not made any donations.</value>
  </data>
  <data name="DonateThankYou" xml:space="preserve">
    <value>Thank-you for your support!</value>
  </data>
  <data name="DonationHistoryHeader" xml:space="preserve">
    <value>Your donation history</value>
  </data>
  <data name="errAccountPasswordConfirmDoesNotMatch" xml:space="preserve">
    <value>The new password and its confirmation much match.  This reduces the likelihood of a typo.</value>
  </data>
  <data name="errAccountPasswordNeedPrevious" xml:space="preserve">
    <value>To change your password, you must first correctly provide your current password</value>
  </data>
  <data name="errAccountPasswordNewMissing" xml:space="preserve">
    <value>Please provide a new password</value>
  </data>
  <data name="errAccountQAAnswerMissing" xml:space="preserve">
    <value>Please type an answer for your question</value>
  </data>
  <data name="errAccountQAPasswordRequired" xml:space="preserve">
    <value>Please type your password</value>
  </data>
  <data name="FlightColoringColorHeader" xml:space="preserve">
    <value>With color:</value>
  </data>
  <data name="FlightColoringDescription" xml:space="preserve">
    <value>If a flight matches multiple saved searches, the color will reflect the first match that is found. </value>
  </data>
  <data name="FlightColoringDescriptionLearnMore" xml:space="preserve">
    <value>Learn more about saving searches</value>
  </data>
  <data name="FlightColoringDoNotColor" xml:space="preserve">
    <value>No color</value>
  </data>
  <data name="FlightColoringFlightsHeader" xml:space="preserve">
    <value>Color flights that match saved searches</value>
  </data>
  <data name="FlightColoringHeader" xml:space="preserve">
    <value>Flight Coloring</value>
  </data>
  <data name="FlightColoringLearnMore" xml:space="preserve">
    <value>Learn how to create a saved search</value>
  </data>
  <data name="FlightColoringNoColor" xml:space="preserve">
    <value>Remove color</value>
  </data>
  <data name="FlightColoringNoSaveQueries" xml:space="preserve">
    <value>You have no saved searches</value>
  </data>
  <data name="FlightColoringSample" xml:space="preserve">
    <value>Sample (Click to change)</value>
  </data>
  <data name="FlightColoringSampleNoClick" xml:space="preserve">
    <value>Sample</value>
  </data>
  <data name="HeaderCustomCurrency" xml:space="preserve">
    <value>Custom Currency Rules</value>
  </data>
  <data name="HeaderCustomDeadlines" xml:space="preserve">
    <value>Custom Deadlines</value>
  </data>
  <data name="HeaderEmail" xml:space="preserve">
    <value>Email Notifications</value>
  </data>
  <data name="HeaderFeatures" xml:space="preserve">
    <value>Features and Preferences</value>
  </data>
  <data name="HeaderOAuthApps" xml:space="preserve">
    <value>Authorized Apps</value>
  </data>
  <data name="HeaderPropsAndTemplates" xml:space="preserve">
    <value>Flight Properties and Templates</value>
  </data>
  <data name="HeaderSharePublicFlights" xml:space="preserve">
    <value>Share your public flights</value>
  </data>
  <data name="MapColorPath" xml:space="preserve">
    <value>Path (GPS track)</value>
  </data>
  <data name="MapColorRoute" xml:space="preserve">
    <value>Route (airport-to-airport)</value>
  </data>
  <data name="MapColorsHeader" xml:space="preserve">
    <value>Colors when showing flights on a map</value>
  </data>
  <data name="MapColorsReset" xml:space="preserve">
    <value>Reset</value>
  </data>
  <data name="MedicalDescriptionCalendarMonths" xml:space="preserve">
    <value>calendar months</value>
  </data>
  <data name="MedicalDescriptionMonths" xml:space="preserve">
    <value>months</value>
  </data>
  <data name="MedicalDescriptionOther" xml:space="preserve">
    <value>Duration {0} {1}</value>
    <comment>{0} is the number of months, {1} is MedicalDescriptionMonths or MedicalDescriptionCalendarMonths</comment>
  </data>
  <data name="MedicalDOBRequired" xml:space="preserve">
    <value>Date of birth is required for certificate in order to compute expiration. </value>
  </data>
  <data name="MedicalEASATip" xml:space="preserve">
    <value>EASA rules around revalidation allow for the revalidation to occur within 45 days of the expiration of a previous medical but still extend from that previous expiration date.  Since %APP_NAME% does know know about any prior medical expiration, it is recommended that for a revalidation you put the expiration date of the previous medical certificate here and put the date of the actual exam, if desired, in the notes.</value>
  </data>
  <data name="MedicalTypeCanadaCommercial" xml:space="preserve">
    <value>Canada - Commercial</value>
  </data>
  <data name="MedicalTypeCanadaGlider" xml:space="preserve">
    <value>Canada - PPL (Glider, Ultralight)</value>
  </data>
  <data name="MedicalTypeCanadaPPL" xml:space="preserve">
    <value>Canada - PPL (other than Glider, Ultralight)</value>
  </data>
  <data name="MedicalTypeCasaClass1" xml:space="preserve">
    <value>CASA Class 1</value>
  </data>
  <data name="MedicalTypeCasaClass2" xml:space="preserve">
    <value>CASA Class 2</value>
  </data>
  <data name="MedicalTypeEASA1stClass" xml:space="preserve">
    <value>EASA/UK Class 1</value>
  </data>
  <data name="MedicalTypeEASA2ndClass" xml:space="preserve">
    <value>EASA/UK Class 2</value>
  </data>
  <data name="MedicalTypeEASALAPL" xml:space="preserve">
    <value>EASA/UK LAPL</value>
  </data>
  <data name="MedicalTypeFAA1stClass" xml:space="preserve">
    <value>FAA - 1st Class</value>
  </data>
  <data name="MedicalTypeFAA2ndClass" xml:space="preserve">
    <value>FAA - 2nd Class</value>
  </data>
  <data name="MedicalTypeFAA3rdClass" xml:space="preserve">
    <value>FAA - 3rd Class</value>
  </data>
  <data name="MedicalTypeOther" xml:space="preserve">
    <value>Other</value>
  </data>
  <data name="MedicalTypePrompt" xml:space="preserve">
    <value>Type of medical certificate</value>
  </data>
  <data name="PaymentCancelled" xml:space="preserve">
    <value>Your payment was canceled.</value>
  </data>
  <data name="PaymentSuccess" xml:space="preserve">
    <value>Thank-you - your payment has been successfully applied!</value>
  </data>
  <data name="PilotInfoBFRNotes" xml:space="preserve">
    <value>When you enter a flight, you can attach a variety of properties such as flight reviews or checkrides.  Most - but not all - checkrides count as reviews.</value>
  </data>
  <data name="PilotInfoBFRs" xml:space="preserve">
    <value>Flight Reviews or Checkrides</value>
  </data>
  <data name="PilotInfoCertificateCFIWatermark" xml:space="preserve">
    <value>Instructor #</value>
  </data>
  <data name="PilotInfoCertificatePrompt" xml:space="preserve">
    <value>Certificate (License) #</value>
  </data>
  <data name="PilotInfoCertificateWatermark" xml:space="preserve">
    <value>Certificate #</value>
  </data>
  <data name="PilotInfoCFIExpiration" xml:space="preserve">
    <value>Certificate or Recent Experience Expiration</value>
  </data>
  <data name="PilotInfoCFIExpirationNote" xml:space="preserve">
    <value>(Only necessary if you want to have records of student endorsements)</value>
  </data>
  <data name="PilotInfoEnglishProficiencyExpiration" xml:space="preserve">
    <value>English Proficiency Check Expiration</value>
  </data>
  <data name="PilotInfoHeader" xml:space="preserve">
    <value>Pilot Information</value>
  </data>
  <data name="PilotInfoInstructorCertificatePrompt" xml:space="preserve">
    <value>CFI (or CFII / GI / DPE / etc.) Certificate #</value>
  </data>
  <data name="PilotInfoIPCHeader" xml:space="preserve">
    <value>Instrument Proficiency Checks</value>
  </data>
  <data name="PilotInfoIPCHelp" xml:space="preserve">
    <value>When you enter a flight, attach a property for an IPC or an Instrument Checkride and it will count towards your instrument currency.</value>
  </data>
  <data name="PilotInfoIPCNoneFound" xml:space="preserve">
    <value>(No Instrument Proficiency Checks were found)</value>
  </data>
  <data name="PilotInfoLastMedical" xml:space="preserve">
    <value>Date of Last Medical</value>
  </data>
  <data name="PilotInfoLicenseFinePrint" xml:space="preserve">
    <value>(Only used when printing your logbook)</value>
  </data>
  <data name="PilotInfoMedical" xml:space="preserve">
    <value>Medical</value>
  </data>
  <data name="PilotInfoMedical12Months" xml:space="preserve">
    <value>12 Months</value>
  </data>
  <data name="PilotInfoMedical24Months" xml:space="preserve">
    <value>24 Months</value>
  </data>
  <data name="PilotInfoMedical36Months" xml:space="preserve">
    <value>36 Months</value>
  </data>
  <data name="PilotInfoMedical48Months" xml:space="preserve">
    <value>48 Months</value>
  </data>
  <data name="PilotInfoMedical60Months" xml:space="preserve">
    <value>60 Months</value>
  </data>
  <data name="PilotInfoMedical6Months" xml:space="preserve">
    <value>6 Months</value>
  </data>
  <data name="PIlotInfoMedicalDOBNote" xml:space="preserve">
    <value>Choose "Other" as your medical type and specify a duration if you do not wish to provide your date of birth.</value>
  </data>
  <data name="PilotInfoMedicalDuration" xml:space="preserve">
    <value>Duration</value>
  </data>
  <data name="PilotInfoMedicalDurationRequired" xml:space="preserve">
    <value>Please specify the duration of your medical.</value>
  </data>
  <data name="PilotInfoMedicalFAARules" xml:space="preserve">
    <value>Use Calendar Months</value>
  </data>
  <data name="PilotInfoMedicalICAORules" xml:space="preserve">
    <value>Use Months (day for day)</value>
  </data>
  <data name="PilotInfoMedicalNextDue" xml:space="preserve">
    <value>Next Medical is Due: </value>
  </data>
  <data name="PilotInfoMedicalNotes" xml:space="preserve">
    <value>Notes</value>
  </data>
  <data name="PilotInfoMedicalNotesDescription" xml:space="preserve">
    <value>E.g., name of the doctor, dates of past medicals, etc.</value>
  </data>
  <data name="PilotInfoMedicalUnspecified" xml:space="preserve">
    <value>(Unspecified)</value>
  </data>
  <data name="PilotInfoMedicalUpdate" xml:space="preserve">
    <value>Update Medical</value>
  </data>
  <data name="PilotInfoMedicalUpdated" xml:space="preserve">
    <value>Medical information successfully updated</value>
  </data>
  <data name="PilotInfoNoBFRFound" xml:space="preserve">
    <value>(No flight reviews or checkrides found)</value>
  </data>
  <data name="PilotInfoNoCheckrides" xml:space="preserve">
    <value>(No checkrides found)</value>
  </data>
  <data name="PilotInfoRatings" xml:space="preserve">
    <value>Ratings</value>
  </data>
  <data name="PilotInfoRatingsPrompt" xml:space="preserve">
    <value>These are your ratings, as determined from checkrides in your logbook. As such, the list may be incomplete.</value>
  </data>
  <data name="PrefAddCustomCurrency" xml:space="preserve">
    <value>Create a new currency rule</value>
  </data>
  <data name="PrefAddDeadline" xml:space="preserve">
    <value>Create a new deadline</value>
  </data>
  <data name="PrefBlockListDesc" xml:space="preserve">
    <value>Properties that you have used on previous flights are automatically shown for new flights.  To reduce clutter, though, you can choose to not display some by default.</value>
  </data>
  <data name="PrefBlockListHide" xml:space="preserve">
    <value>...but not these</value>
  </data>
  <data name="PrefBlockListInstructions" xml:space="preserve">
    <value>Drag and drop between the two lists below if using a mouse; if using touch, press-and-hold to move an item between lists.</value>
  </data>
  <data name="PrefBlockListShow" xml:space="preserve">
    <value>Show these...</value>
  </data>
  <data name="PrefCockpitBlock" xml:space="preserve">
    <value>Block Out/In</value>
  </data>
  <data name="PrefCockpitEngine" xml:space="preserve">
    <value>Engine Start/Stop</value>
  </data>
  <data name="PrefCockpitFlight" xml:space="preserve">
    <value>Flight Start/Stop</value>
  </data>
  <data name="PrefCockpitHobbs" xml:space="preserve">
    <value>Hobbs Start/Stop</value>
  </data>
  <data name="PrefCockpitTach" xml:space="preserve">
    <value>Tach Start/Stop</value>
  </data>
  <data name="PrefCurrencyClutterControl" xml:space="preserve">
    <value>Clutter control</value>
  </data>
  <data name="PrefCurrencyDisplay" xml:space="preserve">
    <value>Currency to include</value>
  </data>
  <data name="PrefCurrencyTotalsSectionHeader" xml:space="preserve">
    <value>Currency/Totals</value>
  </data>
  <data name="PrefDeadlineUseHours" xml:space="preserve">
    <value>Deadline is determined using aircraft hours, not a date</value>
  </data>
  <data name="PrefEditCurrencyTitle" xml:space="preserve">
    <value>Edit Currency Rule</value>
  </data>
  <data name="PrefErrNoShareKeyName" xml:space="preserve">
    <value>Please provide a name for this link</value>
  </data>
  <data name="PrefMathPrecisionHeader" xml:space="preserve">
    <value>When summing times</value>
  </data>
  <data name="PrefMathPrecisionHundredths" xml:space="preserve">
    <value>Use hundredths of an hour</value>
  </data>
  <data name="PrefMathPrecisionMinutes" xml:space="preserve">
    <value>Use whole minutes</value>
  </data>
  <data name="PrefMathPrecisionNote" xml:space="preserve">
    <value>See the FAQ</value>
  </data>
  <data name="PrefSaveOriginalFlight" xml:space="preserve">
    <value>Track differences from when a flight is originally saved</value>
  </data>
  <data name="PrefSaveOriginalFlightDesc" xml:space="preserve">
    <value>Using this option allows you to view the edits that have been made to a flight entry since it was first saved.  See the FAQ for more information.</value>
  </data>
  <data name="PrefSectAutofill" xml:space="preserve">
    <value>Autofill Options</value>
  </data>
  <data name="PrefSectDefaultTimes" xml:space="preserve">
    <value>"Times and Telemetry" fields</value>
  </data>
  <data name="PrefSectFlightEntryDataToInclude" xml:space="preserve">
    <value>Display the following in tables of your flights</value>
  </data>
  <data name="PrefSectFlightEntryHeader" xml:space="preserve">
    <value>Flight Entry and Display</value>
  </data>
  <data name="PrefSectFlightMisc" xml:space="preserve">
    <value>Miscellaneous</value>
  </data>
  <data name="PrefSectNewFlightCustomization" xml:space="preserve">
    <value>Common times for new flights</value>
  </data>
  <data name="PrefSectNewFlightCustomizationTip" xml:space="preserve">
    <value>You can control the order and the display of the time fields that are common to all new flights (PIC, Total, Night, etc.) when editing flights.</value>
  </data>
  <data name="PrefSectNewFlightCustReset" xml:space="preserve">
    <value>Reset to default</value>
  </data>
  <data name="PrefSectNewFlightShowCFI" xml:space="preserve">
    <value>Instructor Time</value>
  </data>
  <data name="PrefSectNewFlightShowSIC" xml:space="preserve">
    <value>Second in Command (SIC) time</value>
  </data>
  <data name="PrefSectNewFlightShowTimes" xml:space="preserve">
    <value>Hobbs time, flight times, and engine times for flights</value>
  </data>
  <data name="PrefSectNewFlightTimeZone" xml:space="preserve">
    <value>Preferred time zone</value>
  </data>
  <data name="PrefSectNewFlightTimeZoneLocal" xml:space="preserve">
    <value>The local date at the point/time of departure</value>
  </data>
  <data name="PrefSectNewFlightTimeZonePrompt" xml:space="preserve">
    <value>Interpret the date of flight as</value>
  </data>
  <data name="PrefSectNewFlightTimeZoneTip" xml:space="preserve">
    <value>Use this if you prefer to enter times in your local timezone; all times will be converted to and displayed as UTC</value>
  </data>
  <data name="PrefSectNewFlightTimeZoneUTC" xml:space="preserve">
    <value>The UTC date at the time of departure</value>
  </data>
  <data name="PrefUpdateDeadline" xml:space="preserve">
    <value>Update Deadline</value>
  </data>
  <data name="ScheduledServiceFlightCrewViewAuthorize" xml:space="preserve">
    <value>Authorize %APP_NAME% on Flight Crew View</value>
  </data>
  <data name="ScheduleServiceFlightCrewViewAuthorized" xml:space="preserve">
    <value>You have authorized %APP_NAME% to pull flights from Flight Crew View</value>
  </data>
  <data name="ScheduleServiceFlightCrewViewDeAuth" xml:space="preserve">
    <value>Deauthorize %APP_NAME% on Flight Crew View</value>
  </data>
  <data name="ScheduleServiceFlightCrewViewDesc" xml:space="preserve">
    <value>Trusted by over 20,000 pilots and flight attendants, Flight Crew View makes it easy to view your flying schedule.</value>
  </data>
  <data name="ScheduleServiceFlightCrewViewManage" xml:space="preserve">
    <value>Configure %APP_NAME% for Flight Crew View and download the app</value>
  </data>
  <data name="ScheduleServiceFlightCrewViewName" xml:space="preserve">
    <value>Flight Crew View</value>
  </data>
  <data name="ScheduleServiceFlightCrewViewNotAuthorized" xml:space="preserve">
    <value>You have not authorized %APP_NAME% to pull flights from Flight Crew View</value>
  </data>
  <data name="ScheduleServiceHeader" xml:space="preserve">
    <value>Airline Scheduling Systems</value>
  </data>
  <data name="ScheduleServiceLeonDesc" xml:space="preserve">
    <value>If your airline uses Leon for its scheduling, you can import scheduled flights directly into your Pending Flights</value>
  </data>
  <data name="ScheduleServiceLeonManage" xml:space="preserve">
    <value>Configure %APP_NAME% for Leon</value>
  </data>
  <data name="ScheduleServiceLeonName" xml:space="preserve">
    <value>Leon</value>
  </data>
  <data name="ScheduleServiceRBDesc" xml:space="preserve">
    <value>RosterBuster makes it easy to view your airline's roster on the go! Join and connect with over 400,000 airline crew professionals worldwide.</value>
  </data>
  <data name="ScheduleServiceRBDownloadPrompt" xml:space="preserve">
    <value>Download the RosterBuster app</value>
  </data>
  <data name="ScheduleServiceRBManage" xml:space="preserve">
    <value>Configure %APP_NAME% for RosterBuster and download the app</value>
  </data>
  <data name="ScheduleServiceRBName" xml:space="preserve">
    <value>RosterBuster</value>
  </data>
  <data name="ScheduleServiceRBScanQRCode" xml:space="preserve">
    <value>Scan the QR code below to download the RosterBuster app to your iOS or Android device</value>
  </data>
  <data name="SharingCreateShareLink" xml:space="preserve">
    <value>Create Link</value>
  </data>
  <data name="SharingShareFlightsDisclaimer" xml:space="preserve">
    <value>This will ONLY show flights for which you have allowed details to be visible.</value>
  </data>
  <data name="SharingShareKeyNameHint" xml:space="preserve">
    <value>Suggestion: use the name of the recipient</value>
  </data>
</root>