@using System.Globalization
@using MyFlightbook.Image
@using MyFlightbook.Printing
@{
    PrintLayout pl = ViewBag.pl;
    IEnumerable<LogbookPrintedPage> pages = pl.Pages;
}
@foreach (LogbookPrintedPage lpp in pages)
{
    Html.RenderPartial("_printHeader");
    pl.StripRedundantOrExcludedProperties(new int[] {
     (int) CustomPropertyType.KnownProperties.IDPropStudentName,
     (int) CustomPropertyType.KnownProperties.IDPropNameOfSIC,
     (int) CustomPropertyType.KnownProperties.IDPropNameOfPIC,
     (int) CustomPropertyType.KnownProperties.IDPropPassengerNames,
     (int) CustomPropertyType.KnownProperties.IDPropCaptainName,
     (int) CustomPropertyType.KnownProperties.IDPropFirstOfficerName,
     (int) CustomPropertyType.KnownProperties.IDPropNightTakeoff
    }, lpp.Flights);
    int iFlightRow = 0;
    int iSubtotal = 0;
    
    <table class="pageTable">
        <thead class="header bordered">
            <tr class="bordered">
                <th class="headerBig w10ch brdrRt2" rowspan="3">@Resources.LogbookEntry.PrintHeaderDate</th>
                <th class="headerBig w12cm brdrRt2" colspan="2">@Resources.LogbookEntry.PrintHeaderAircraft</th>
                <th class="headerBig w1cm" rowspan="3">@Resources.LogbookEntry.PrintHeaderPICName</th>
                <th class="headerBig w1cm brdrRt2" rowspan="3">@Resources.LogbookEntry.PrintHeaderCoPilotOrStudentOrPassenger</th>
                <th class="headerBig brdrRt2" colspan="2" rowspan="2">@Resources.LogbookEntry.PrintHeaderRoute</th>
                <th class="headerBig brdrRt2" rowspan="3">@Resources.LogbookEntry.PrintHeaderRemarks</th>
                <th class="headerBig brdrRt2" colspan="@(pl.CurrentUser.TracksSecondInCommandTime ? 3 :2)" rowspan="2">@Resources.LogbookEntry.PrintHeaderDay</th>
                <th class="headerBig brdrRt2" colspan="@(pl.CurrentUser.TracksSecondInCommandTime ? 3 :2)" rowspan="2">@Resources.LogbookEntry.PrintHeaderNight</th>
                <th class="headerBig brdrRt2" colspan="4">@Resources.LogbookEntry.PrintHeaderInstrumentTime</th>
                <th class="headerBig brdrRt2" colspan="@(pl.CurrentUser.TracksSecondInCommandTime ? 6 : 4)">@Resources.LogbookEntry.PrintHeaderCrossCountry</th>
                @if (pl.CurrentUser.IsInstructor)
                {
                    <th class="headerBig w1cm brdrRt2" rowspan="3">@Resources.LogbookEntry.FieldCFI</th>
                }
                <th class="headerBig brdrRt2" colspan="2" rowspan="2">@Resources.LogbookEntry.PrintHeaderTakeoffsLandings</th>
                @foreach (OptionalColumn oc in pl.Options.OptionalColumns)
                {
                    <th class="headerBig w1cm" rowspan="3"><div class="custColumn">@oc.Title</div></th>
                }

                <th class="headerBig w1cm" rowspan="3">@Resources.LogbookEntry.PrintHeaderTotalTime</th>
            </tr>
            <tr class="bordered">
                <th class="headerSmall oddRow" rowspan="2">@Resources.LogbookEntry.PrintHeaderModel</th>
                <th class="headerSmall oddRow brdrRt2" rowspan="2">@Resources.LogbookEntry.PrintHeaderRegistration</th>

                <th class="headerSmall oddRow w1cm" rowspan="2">@Resources.LogbookEntry.FieldIMC</th>
                <th class="headerSmall oddRow w1cm" rowspan="2">@Html.Raw(Resources.LogbookEntry.FieldSimIMC)</th>
                <th class="headerSmall oddRow w1cm" rowspan="2">@Html.Raw(Resources.LogbookEntry.FieldGroundSim)</th>
                <th class="headerSmall oddRow w1cm brdrRt2" rowspan="2">@Resources.LogbookEntry.PrintHeaderApproaches</th>
                <th class="headerSmall oddRow brdrRt2" colspan="@(pl.CurrentUser.TracksSecondInCommandTime ? 3 :2)">@Resources.LogbookEntry.PrintHeaderDay</th>
                <th class="headerSmall oddRow brdrRt2" colspan="@(pl.CurrentUser.TracksSecondInCommandTime ? 3 : 2)">@Resources.LogbookEntry.PrintHeaderNight</th>
            </tr>
            <tr class="bordered">
                <th class="headerSmall oddRow w1cm">@Resources.LogbookEntry.PrintHeaderFrom</th>
                <th class="headerSmall oddRow w1cm brdrRt2">@Resources.LogbookEntry.PrintHeaderTo</th>

                <th class="headerSmall oddRow w1cm">@Resources.LogbookEntry.FieldDual</th>
                <th class="headerSmall oddRow w1cm brdrRt2">@Resources.LogbookEntry.PrintHeaderPIC2</th>
                @if (pl.CurrentUser.TracksSecondInCommandTime)
                {
                    <th class="headerSmall oddRow w1cm brdrRt2">@Resources.LogbookEntry.FieldSIC</th>
                }

                <th class="headerSmall oddRow w1cm">@Resources.LogbookEntry.FieldDual</th>
                <th class="headerSmall oddRow w1cm brdrRt2">@Resources.LogbookEntry.PrintHeaderPIC2</th>
                @if (pl.CurrentUser.TracksSecondInCommandTime)
                {
                    <th class="headerSmall oddRow w1cm brdrRt2">@Resources.LogbookEntry.FieldSIC</th>
                }

                <th class="headerSmall oddRow w1cm">@Resources.LogbookEntry.FieldDual</th>
                @if (pl.CurrentUser.TracksSecondInCommandTime)
                {
                    <th class="headerSmall oddRow w1cm">@Resources.LogbookEntry.FieldSIC</th>
                }
                <th class="headerSmall oddRow w1cm brdrRt2">@Resources.LogbookEntry.PrintHeaderPIC2</th>
                <th class="headerSmall oddRow w1cm">@Resources.LogbookEntry.FieldDual</th>
                @if (pl.CurrentUser.TracksSecondInCommandTime)
                {
                    <th class="headerSmall oddRow w1cm">@Resources.LogbookEntry.FieldSIC</th>
                }
                <th class="headerSmall oddRow w1cm brdrRt2">@Resources.LogbookEntry.PrintHeaderPIC2</th>
                <th class="headerSmall oddRow">@Resources.LogbookEntry.PrintHeaderDay</th>
                <th class="headerSmall oddRow brdrRt2">@Resources.LogbookEntry.PrintHeaderNight</th>
            </tr>
        </thead>
        <tbody>
            @foreach (LogbookEntryDisplay led in lpp.Flights)
            {
                <tr class="bordered @(iFlightRow % 2 == 0 ? "evenRow" : "oddRow") @(iFlightRow++ == 0 ? "topThick" : string.Empty)" @Html.Raw(pl.ColorForFlight(led))>
                    <td class="centered b brdrRt2">@pl.ChangeMarkerForFlight(led)@led.Date.ToShortDateString()</td>
                    <td class="centered"><div>@pl.ModelDisplay(led) (@led.CatClassDisplay)</div></td>
                    <td class="centered brdrRt2">@led.TailNumOrSimDisplay</td>
                    <td class="centered">@led.PICName</td>
                    <td class="centered brdrRt2">@led.SICName @led.StudentName @led.CustomProperties.StringValueForProperty(CustomPropertyType.KnownProperties.IDPropPassengerNames)</td>
                    <td class="centered">@led.Departure</td>
                    <td class="centered brdrRt2">@led.Destination</td>
                    <td class="brdrRt2">
                        <div>@(led.Airports.Count() <= 2 ? string.Empty : String.Format(System.Globalization.CultureInfo.CurrentCulture, Resources.LocalizedText.PrintFullRoute, led.Route))</div>
                        <div dir="auto">@Html.Raw(led.RedactedCommentWithReplacedApproaches)</div>
                        @if (pl.CurrentUser.DisplayTimesByDefault)
                        {
                            <div>@led.EngineTimeDisplay</div>
                            <div>@led.FlightTimeDisplay</div>
                            <div>@led.HobbsDisplay</div>
                        }
                        <div class="wsprel">@led.CustPropertyDisplay.ToString()</div>
                        @if (pl.Options.IncludeSignatures && led.CFISignatureState != LogbookEntryCore.SignatureState.None)
                        {
                            Html.RenderAction("SignatureBlock", "Flights", new { led = led, fUseHHMM = pl.CurrentUser.UsesHHMM, fInteractive = false });
                        }
                        @if (pl.Options.IncludeImages)
                        {
                            ImageList il = new ImageList(MFBImageInfoBase.ImageClass.Flight, led.FlightID.ToString(CultureInfo.InvariantCulture));
                            il.Refresh(false, null, false);
                            for (int i = 0; i < il.ImageArray.Count && i < 3; i++)
                            {
                                MFBImageInfo img = il.ImageArray[i];
                                <div class="ilItem">
                                    <img src="@img.URLThumbnail" width="@img.WidthThumbnail" height="@img.HeightThumbnail" />
                                    <div>@img.Comment</div>
                                </div>
                            }
                        }
                    </td>
                    <td>@(Math.Max(led.Dual - led.Nighttime, 0.0M).FormatDecimal(pl.CurrentUser.UsesHHMM))</td>
                    <td class="brdrRt2">@(Math.Max(led.PIC - led.Nighttime, 0.0M).FormatDecimal(pl.CurrentUser.UsesHHMM))</td>
                    @if (pl.CurrentUser.TracksSecondInCommandTime)
                    {
                        <td class="brdrRt2">@Math.Max(led.SIC - led.Nighttime, 0.0M).FormatDecimal(pl.CurrentUser.UsesHHMM)</td>
                    }
                    <td>@Math.Min(led.Dual, led.Nighttime).FormatDecimal(pl.CurrentUser.UsesHHMM)</td>
                    <td class="brdrRt2">@Math.Min(led.PIC, led.Nighttime).FormatDecimal(pl.CurrentUser.UsesHHMM)</td>
                    @if (pl.CurrentUser.TracksSecondInCommandTime)
                    {
                        <td class="brdrRt2">@Math.Min(led.SIC, led.Nighttime).FormatDecimal(pl.CurrentUser.UsesHHMM)</td>
                    }

                    <td>@led.IMC.FormatDecimal(pl.CurrentUser.UsesHHMM)</td>
                    <td>@led.SimulatedIFR.FormatDecimal(pl.CurrentUser.UsesHHMM)</td>
                    <td>@led.GroundSim.FormatDecimal(pl.CurrentUser.UsesHHMM)</td>
                    <td class="brdrRt2">@led.Approaches.FormatInt()</td>

                    <td>@Math.Min(led.Dual, led.DayXC).FormatDecimal(pl.CurrentUser.UsesHHMM)</td>
                    @if (pl.CurrentUser.TracksSecondInCommandTime)
                    {
                        <td>@Math.Min(led.SIC, led.DayXC).FormatDecimal(pl.CurrentUser.UsesHHMM)</td>
                    }
                    <td class="brdrRt2">@Math.Min(led.PIC, led.DayXC).FormatDecimal(pl.CurrentUser.UsesHHMM)</td>
                    <td>@Math.Min(led.Dual, led.NightXC).FormatDecimal(pl.CurrentUser.UsesHHMM)</td>
                    @if (pl.CurrentUser.TracksSecondInCommandTime)
                    {
                        <td>@Math.Min(led.SIC, led.NightXC).FormatDecimal(pl.CurrentUser.UsesHHMM)</td>
                    }
                    <td class="brdrRt2">@Math.Min(led.PIC, led.NightXC).FormatDecimal(pl.CurrentUser.UsesHHMM)</td>
                    @if (pl.CurrentUser.IsInstructor)
                    {
                        <td class="brdrRt2">@led.CFI.FormatDecimal(pl.CurrentUser.UsesHHMM)</td>
                    }

                    <td class="centered">@PrintLayout.FormatTakeoffs(led.DayTakeoffs) @PrintLayout.FormatLandings(Math.Max(led.NetDayLandings, 0))</td>
                    <td class="centered brdrRt2">@PrintLayout.FormatTakeoffs(led.NightTakeoffs) @PrintLayout.FormatLandings(led.NetNightLandings)</td>

                    @for (int i = 0; i < pl.Options.OptionalColumns.Count; i++)
                    {
                        <td>@led.OptionalColumnDisplayValue(i, pl.CurrentUser.UsesHHMM)</td>
                    }
                    <td>@led.TotalFlightTime.FormatDecimal(pl.CurrentUser.UsesHHMM)</td>
                </tr>
            }
            @foreach (LogbookPrintedPageSubtotalsCollection stc in lpp.Subtotals)
            {
                int itemIndex = 0;
                foreach (LogbookEntryDisplay led in stc.Subtotals)
                {
                    <tr class="subtotal @((itemIndex % 2 == 0 ? "evenRow" : "oddRow") + (iSubtotal++ == 0 ? " sbTop" : string.Empty))">
                        @if (itemIndex++ == 0)
                        {
                            <td class="subtotalLabel" colspan="4" rowspan='@stc.SubtotalCount'></td>
                            <td rowspan='@stc.SubtotalCount' colspan="3">@stc.GroupTitle</td>
                        }
                        <td class="brdrRt2">@led.CatClassDisplay</td>

                        <td>@Math.Max(led.Dual - led.NightDualTotal, 0).FormatDecimal(pl.CurrentUser.UsesHHMM)</td>
                        <td class="brdrRt2">@Math.Max(led.PIC - led.NightPICTotal, 0).FormatDecimal(pl.CurrentUser.UsesHHMM)</td>
                        @if (pl.CurrentUser.TracksSecondInCommandTime)
                        {
                            <td class="brdrRt2">@Math.Max(led.SIC - led.NightSICTotal, 0).FormatDecimal(pl.CurrentUser.UsesHHMM)</td>
                        }
                        <td>@led.NightDualTotal.FormatDecimal(pl.CurrentUser.UsesHHMM)</td>
                        <td class="brdrRt2">@led.NightPICTotal.FormatDecimal(pl.CurrentUser.UsesHHMM)</td>
                        @if (pl.CurrentUser.TracksSecondInCommandTime)
                        {
                            <td class="brdrRt2">@led.NightSICTotal.FormatDecimal(pl.CurrentUser.UsesHHMM)</td>
                        }

                        <td>@led.IMC.FormatDecimal(pl.CurrentUser.UsesHHMM)</td>
                        <td>@led.SimulatedIFR.FormatDecimal(pl.CurrentUser.UsesHHMM)</td>
                        <td>@led.GroundSim.FormatDecimal(pl.CurrentUser.UsesHHMM)</td>
                        <td class="brdrRt2">@led.Approaches.FormatInt()</td>

                        <td>@Math.Max((led.XCDualTotal - led.XCNightDualTotal), 0).FormatDecimal(pl.CurrentUser.UsesHHMM)</td>
                        @if (pl.CurrentUser.TracksSecondInCommandTime)
                        {
                            <td>@Math.Max((led.XCSICTotal - led.XCNightSICTotal), 0).FormatDecimal(pl.CurrentUser.UsesHHMM)</td>
                        }
                        <td class="brdrRt2">@Math.Max((led.XCPICTotal - led.XCNightPICTotal), 0).FormatDecimal(pl.CurrentUser.UsesHHMM)</td>
                        <td>@led.XCNightDualTotal.FormatDecimal(pl.CurrentUser.UsesHHMM)</td>
                        @if (pl.CurrentUser.TracksSecondInCommandTime)
                        {
                            <td>@led.XCNightSICTotal.FormatDecimal(pl.CurrentUser.UsesHHMM)</td>
                        }
                        <td class="brdrRt2">@led.XCNightPICTotal.FormatDecimal(pl.CurrentUser.UsesHHMM)</td>

                        @if (pl.CurrentUser.IsInstructor)
                        {
                            <td class="brdrRt2">@led.CFI.FormatDecimal(pl.CurrentUser.UsesHHMM)</td>
                        }

                        <td class="centered">@PrintLayout.FormatTakeoffs(led.DayTakeoffTotal) @PrintLayout.FormatLandings(led.LandingsTotal - led.NightLandings - led.NightTouchAndGoLandings)</td>
                        <td class="centered brdrRt2">@PrintLayout.FormatTakeoffs(led.NightTakeoffTotal) @PrintLayout.FormatLandings(led.NightLandings + led.NightTouchAndGoLandings)</td>

                        @for (int i = 0; i < pl.Options.OptionalColumns.Count; i++)
                        {
                            <td class="numericColumn">@led.OptionalColumnTotalDisplayValue(i, pl.CurrentUser.UsesHHMM)</td>
                        }
                        <td>@led.TotalFlightTime.FormatDecimal(pl.CurrentUser.UsesHHMM)</td>
                    </tr>
                }
            }
        </tbody>
    </table>
    Html.RenderAction("PageFooter", "Print", new { pf = pl.CurrentUser, pageNum = lpp.PageNum, totalPages = lpp.TotalPages, showFoot = pl.ShowFooter });
}
