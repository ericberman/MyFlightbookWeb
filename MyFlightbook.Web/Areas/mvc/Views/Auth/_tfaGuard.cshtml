<script type="text/javascript">
    $(() => {
        defaultButtonForDiv("divGuard2fa", "btnVerifyCode");
        $("#txtTfaCode")[0].focus();

        $.validator.addMethod("regex2fa", function (value, element) {
            return this.optional(element) || /^[0-9]{6}$/.test(value);
        }, "@Resources.Profile.TFAErrCodeFormat");

        validateForm($("#frm2faGuard"), {
            tfaCode: { required: true, regex2fa: true, minlength: 6, maxlength: 6 }
        }, {
            tfaCode: { required: '@Resources.Profile.TFARequired', regex2fa: '@Resources.Profile.TFAErrCodeFormat', minlength: '@Resources.Profile.TFAErrCodeFormat', maxlength: '@Resources.Profile.TFAErrCodeFormat' }
        });
    });
</script>
<p>@Resources.Profile.TFARequired</p>
<p>@Resources.Profile.TFAUseYourApp</p>
@using (Html.BeginForm("GuardDestination", "Auth", FormMethod.Post, new { id = "frm2faGuard", name = "frm2faGuard" }))
{
    @Html.AntiForgeryToken()
    <div id="divGuard2fa">
        <input type="hidden" name="ret" value="@ViewBag.returnRef" />
        <input type="text" placeholder="######" maxlength="6" pattern="^[0-9]{6}$" required data-1p-ignore name="tfaCode" id="txtTfaCode" />
        <button type="button" id="btnVerifyCode" onclick="javascript: if ($('#frm2faGuard').valid()) { (@ViewBag.onSubmit)($(this).prev().val()); }; return false;">@Resources.Profile.TFAValidateCode</button>
    </div>
    <div class="error" id="twoFactorErr">@(ViewBag.tfaErr ?? string.Empty)</div>
}
