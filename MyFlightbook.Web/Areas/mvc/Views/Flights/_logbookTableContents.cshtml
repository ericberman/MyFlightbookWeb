@using System.Globalization
@using MyFlightbook
@using MyFlightbook.Achievements
@using MyFlightbook.Image
@using MyFlightbook.Web.Sharing
@{
    FlightResult fr = ViewBag.flightResults;
    FlightQuery query = ViewBag.query;
    bool readOnly = ViewBag.readOnly;

    Profile pfTarget = ViewBag.pfTarget;
    Profile pfViewer = ViewBag.pfViewer;
    bool fTracksOriginal = pfTarget.PreferenceExists(MFBConstants.keyTrackOriginal);
    bool isCompact = pfViewer.GetPreferenceForKey(MFBConstants.keyPrefCompact, false);
    bool inlineImages = pfViewer.GetPreferenceForKey(MFBConstants.keyPrefInlineImages, false);
    int flightsPerPage = pfViewer.GetPreferenceForKey(MFBConstants.keyPrefFlightsPerPage, MFBConstants.DefaultFlightsPerPage);
    InstructorStudent student = ViewBag.student;

    bool isViewingOwnFlights = pfTarget.UserName.CompareOrdinal(pfViewer.UserName) == 0 && !readOnly;
    bool fAllowMenu = !readOnly && isViewingOwnFlights;
    bool fAllowSign = readOnly && !isViewingOwnFlights && student != null;

    FlightResultRange currentRange = ViewBag.currentRange;
    IDictionary<int, IList<Badge>> dictBadges = (pfTarget.AchievementStatus == Achievement.ComputeStatus.UpToDate) ? Badge.BadgesByFlight(pfTarget.CachedBadges) : new Dictionary<int, IList<Badge>>();
    Dictionary<int, Aircraft> dictAircraft = ViewBag.dictAircraft;
    IEnumerable<CannedQuery> colorQueryMap = FlightColor.QueriesToColor(pfTarget.UserName);
    ShareKey sk = ViewBag.sk;
    HashSet<int> hsSelected = ViewBag.selectedFlights;
    bool miniMode = ViewBag.miniMode;
    HashSet<int> hsPropExclusion = new HashSet<int>()
    {
        (int) CustomPropertyType.KnownProperties.IDPropFlightNumber
    };
}
<script type="text/javascript">
    $(() => {
        defaultButtonForDiv("pnlPager", "btnSetPage");
    });
</script>
@if (fr.FlightCount == 0)
{
    <div>@Resources.LogbookEntry.EmptyLogbook</div>
}
else
{
    <table cellpadding="3" cellspacing="0" class="lbTable">
        <thead>
            <tr class="gvhDefault">
                <th class="headerBase gvhLeft @fr.CssForSort("Date")" onclick="javascript: headerClicked('Date');">@Resources.LogbookEntry.FieldFlight</th>
                <th class="headerBase gvhCentered @fr.CssForSort("TailNumDisplay")" onclick="javascript: headerClicked('TailNumDisplay');">@Resources.LogbookEntry.FieldTail</th>
                @if (!miniMode)
                {
                    <th class="headerBase gvhCentered @fr.CssForSort("CatClassDisplay")" onclick="javascript: headerClicked('CatClassDisplay');">@Html.Raw(Resources.LogbookEntry.FieldCatClassType)</th>
                    <th class="headerBase gvhCentered @fr.CssForSort("Approaches")" onclick="javascript: headerClicked('Approaches');">@Resources.LogbookEntry.PrintHeaderApproaches</th>
                    <th class="headerBase gvhCentered @fr.CssForSort("fHoldingProcedures")" onclick="javascript: headerClicked('fHoldingProcedures');">@Resources.LogbookEntry.FieldHold</th>
                    <th class="headerBase gvhCentered @fr.CssForSort("Landings")" onclick="javascript: headerClicked('Landings');">
                        @Resources.LogbookEntry.PrintHeaderLandingsShort
                        @{ Html.RenderAction("RenderTooltip", "MFBTemplate", new { tipID = "landingHeader", tipTextHTML = Resources.LogbookEntry.LogbookLandingKey }); }
                    </th>
                    <th class="headerBase gvhCentered @fr.CssForSort("CrossCountry")" onclick="javascript: headerClicked('CrossCountry');">@Resources.LogbookEntry.FieldXCountry</th>
                    <th class="headerBase gvhCentered @fr.CssForSort("Nighttime")" onclick="javascript: headerClicked('Nighttime');">@Resources.LogbookEntry.FieldNight</th>
                    <th class="headerBase gvhCentered @fr.CssForSort("SimulatedIFR")" onclick="javascript: headerClicked('SimulatedIFR');">@Html.Raw(Resources.LogbookEntry.FieldSimIMC)</th>
                    <th class="headerBase gvhCentered @fr.CssForSort("IMC")" onclick="javascript: headerClicked('IMC');">@Resources.LogbookEntry.FieldIMC</th>
                    <th class="headerBase gvhCentered @fr.CssForSort("GroundSim")" onclick="javascript: headerClicked('GroundSim');">@Html.Raw(Resources.LogbookEntry.FieldGroundSim)</th>
                    <th class="headerBase gvhCentered @fr.CssForSort("Dual")" onclick="javascript: headerClicked('Dual');">@Resources.LogbookEntry.FieldDual</th>
                    if (pfTarget.IsInstructor)
                    {
                        <th class="headerBase gvhCentered @fr.CssForSort("CFI")" onclick="javascript: headerClicked('CFI');">@Resources.LogbookEntry.FieldCFI</th>
                    }
                    if (pfTarget.TracksSecondInCommandTime)
                    {
                        <th class="headerBase gvhCentered @fr.CssForSort("SIC")" onclick="javascript: headerClicked('SIC');">@Resources.LogbookEntry.FieldSIC</th>
                    }
                    <th class="headerBase gvhCentered @fr.CssForSort("PIC")" onclick="javascript: headerClicked('PIC');">@Resources.LogbookEntry.FieldPIC</th>
                }
                <th class="headerBase gvhCentered @fr.CssForSort("TotalFlightTime")" onclick="javascript: headerClicked('TotalFlightTime');">@Resources.LogbookEntry.FieldTotal</th>
                <th class="headerBase gvhCentered">
                    <input type="checkbox" onchange="javascript: toggleSelectAll(this);" class="dn" id="ckSelectAll" />
                </th>
                <th class="headerBase gvhCentered noprint"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (LogbookEntryDisplay led in fr.FlightsInRange(currentRange))
            {
                string szExpandoID = String.Format(CultureInfo.InvariantCulture, "expando{0}", led.FlightID);
                Aircraft ac = dictAircraft[led.AircraftID];
                if (led.FlightImages.Count == 0)
                {
                    led.PopulateImages();
                }
                string szBackColor = string.Empty;
                foreach (CannedQuery cq in colorQueryMap)
                {
                    if (cq.MatchesFlight(led))
                    {
                        // Break on a match, doing these in order - this needs to be deterministic
                        szBackColor = String.Format(CultureInfo.InvariantCulture, "background-color: #{0}", cq.ColorString);
                        break;
                    }
                }
                bool showCollapsed = isCompact && led.CanCollapse(pfViewer.DisplayTimesByDefault);
                <tr class="logbookRow logbookRowEven" style="@szBackColor">
                    <td class="gvcLeft">
                        <div class="noprint flR">
                            @if (dictBadges.TryGetValue(led.FlightID, out IList<Badge> badges))
                            {
                                foreach (Badge b in badges)
                                {
                                    <img class="imgMiddle" src="@("~/images/Badge-sm.png".ToAbsolute())" title="@b.Name" alt="@b.Name" />
                                }
                            }
                            @if (led.FlightImages.Count > 0 && !inlineImages)
                            {
                                <img src="@VirtualPathUtility.ToAbsolute("~/Images/camera.png")" class="popTrigger imgMiddle" alt="@Resources.LogbookEntry.LogbookFlightHasPicturesTooltip" title="@Resources.LogbookEntry.LogbookFlightHasPicturesTooltip" />
                                <div class="popMenuContent popMenuHidden hintPopup">
                                    @foreach (MFBImageInfo img in led.FlightImages)
                                    {
                                        <div class="ilItem">
                                            @if (img.ImageType == MFBImageInfoBase.ImageFileType.S3VideoMP4)
                                            {
                                                <video width="320" heght="240" controls>
                                                    <source src="@img.ResolveFullImage()" type="video/mp4" />
                                                    <img src="@img.URLThumbnail" width="@img.WidthThumbnail" height="@img.HeightThumbnail" title="@img.Comment" alt="@img.Comment" />
                                                </video>
                                            }
                                            else
                                            {
                                                <img src="@img.URLThumbnail" width="@img.WidthThumbnail" height="@img.HeightThumbnail" title="@img.Comment" alt="@img.Comment"
                                                     onclick="@String.Format(CultureInfo.InvariantCulture, img.ImageType == MFBImageInfoBase.ImageFileType.PDF || img.ImageType == MFBImageInfoBase.ImageFileType.S3PDF ? "javascript:window.location = '{0}';" : "javascript:viewMFBImg('{0}');", VirtualPathUtility.ToAbsolute(img.URLFullImage))" />
                                            }
                                            <div>@img.Comment</div>
                                        </div>
                                    }
                                </div>
                            }
                            @if (led.HasFlightData && !readOnly)
                            {
                                <a href="@String.Format(CultureInfo.InvariantCulture, "~/mvc/flights/details/{0}?tabID=Chart", led.FlightID).ToAbsolute()">
                                    <img src="@("~/images/Clip.png".ToAbsolute())" class="imgMiddle darkSensitive" alt="@Resources.LogbookEntry.LogbookFlightHasTelemetry" title="@Resources.LogbookEntry.LogbookFlightHasTelemetry" />
                                </a>
                            }
                        </div>
                        <div>
                            <a class="largeBold" href="@(readOnly ? String.Format(CultureInfo.InvariantCulture, "~/mvc/pub/ViewFlight/{0}", led.FlightID).ToAbsolute() : String.Format(CultureInfo.InvariantCulture, "~/mvc/flights/details/{0}?{1}", led.FlightID, (string) ViewBag.contextParams).ToAbsolute())">@led.Date.ToShortDateString()</a>
                            <span class="largeBold">@led.CustomProperties.StringValueForProperty(CustomPropertyType.KnownProperties.IDPropFlightNumber)</span>
                            <a class="b" href="@String.Format(CultureInfo.InvariantCulture, "~/mvc/pub/ViewFlight/{0}", led.FlightID).ToAbsolute()">@led.Route</a>
                            <span class="wsprel" dir="auto">@Html.Raw(led.CommentWithReplacedApproaches)</span>
                            @if (showCollapsed)
                            {
                                <img src="@("~/images/expand.png".ToAbsolute())" onclick="javascript: toggleImage(this, '@szExpandoID', null, null);" />
                            }
                        <div id="@szExpandoID" class="@(showCollapsed ? "dn" : string.Empty)">
                            @if (pfViewer.DisplayTimesByDefault)
                            {
                                <div>@led.EngineTimeDisplay</div>
                                <div>@led.FlightTimeDisplay</div>
                                <div>@led.HobbsDisplay</div>
                            }
                            @foreach (string s in CustomFlightProperty.PropDisplayAsList(led.CustomProperties, led.UseHHMM, true, true, hsPropExclusion))
                            {
                                <div>@Html.Raw(s)</div>
                            }
                            @if (led.CFISignatureState != LogbookEntryCore.SignatureState.None)
                            {
                                Html.RenderAction("SignatureBlock", "Flights", new { led = led, fUseHHMM = pfViewer.UsesHHMM, fInteractive = true });
                            }
                            else if (fTracksOriginal && led.HasFlightHash)
                            {
                                string szDiffs = led.DiffsAsHTMLList(pfViewer.UsesHHMM);
                                if (!String.IsNullOrEmpty(szDiffs))
                                {
                                    <div class="signatureBlock">
                                        <div>@Resources.LogbookEntry.FlightModified</div>
                                        @Html.Raw(szDiffs)
                                    </div>
                                }
                            }
                        </div>
                            <div>
                                @if (inlineImages)
                                {
                                    foreach (MFBImageInfo img in led.FlightImages)
                                    {
                                        <div class="ilItem">
                                            @if (img.ImageType == MFBImageInfoBase.ImageFileType.S3VideoMP4)
                                            {
                                                <video width="320" heght="240" controls>
                                                    <source src="@img.ResolveFullImage()" type="video/mp4" />
                                                    <img src="@img.URLThumbnail" width="@img.WidthThumbnail" height="@img.HeightThumbnail" title="@img.Comment" alt="@img.Comment" />
                                                </video>
                                            }
                                            else
                                            {
                                                <img src="@img.URLThumbnail" width="@img.WidthThumbnail" height="@img.HeightThumbnail" title="@img.Comment" alt="@img.Comment"
                                                     onclick="@String.Format(CultureInfo.InvariantCulture, img.ImageType == MFBImageInfoBase.ImageFileType.PDF || img.ImageType == MFBImageInfoBase.ImageFileType.S3PDF ? "javascript:window.location = '{0}';" : "javascript:viewMFBImg('{0}');", VirtualPathUtility.ToAbsolute(img.URLFullImage))" />
                                            }
                                            <div>@img.Comment</div>
                                        </div>
                                    }
                                }
                            </div>
                            <div class="error">@led.ErrorString</div>
                        </div>
                    </td>
                    <td class="gvcCentered">
                        <a class="popTrigger" href="@AircraftUtility.EditLink(ac.AircraftID)">@led.TailNumDisplay</a>
                        <div class="popMenuContent popMenuHidden hintPopup" style="margin-top: -60px; margin-left: 50px">
                            <div class="c">@led.ModelDisplay @led.CatClassDisplay</div>
                            @foreach (MFBImageInfo img in ac.AircraftImages)
                            {
                                if (img.ImageType == MFBImageInfoBase.ImageFileType.JPEG)
                                {
                                    <div class="ilItem">
                                        <img src="@img.URLThumbnail" width="@img.WidthThumbnail" height="@img.HeightThumbnail" title="@img.Comment" alt="@img.Comment"
                                             onclick="@String.Format(CultureInfo.InvariantCulture, img.ImageType == MFBImageInfoBase.ImageFileType.PDF || img.ImageType == MFBImageInfoBase.ImageFileType.S3PDF ? "javascript:window.location = '{0}';" : "javascript:viewMFBImg('{0}');", VirtualPathUtility.ToAbsolute(img.URLFullImage))" />
                                        <div>@img.Comment</div>
                                    </div>
                                }
                            }
                        </div>
                        <div class="printonly">
                            <div>@led.ModelDisplay</div>
                            <div>@AircraftInstance.ShortNameForInstanceType(ac.InstanceType)</div>
                        </div>
                    </td>
                    @if (!miniMode)
                    {
                        <td class="gvcCentered">
                            @if (led.IsOverridden)
                            {
                                <span class="overriddenCatClass" title="@Resources.LogbookEntry.LogbookAltCatClassTooltip">@led.CatClassDisplay</span>
                            }
                            else
                            {
                                <span>@led.CatClassDisplay</span>
                            }
                            <div class="printonly">@MakeModel.GetModel(led.ModelID).AttributeListSingleLine</div>
                        </td>
                        <td class="gvcCentered">@led.Approaches.FormatInt()</td>
                        <td class="gvcCentered largeBold">@Html.Raw(led.fHoldingProcedures.FormatBoolean())</td>
                        <td class="gvcCentered">@led.LandingDisplay</td>
                        <td class="gvcRight">@led.CrossCountry.FormatDecimal(pfViewer.UsesHHMM)</td>
                        <td class="gvcRight">@led.Nighttime.FormatDecimal(pfViewer.UsesHHMM)</td>
                        <td class="gvcRight">@led.SimulatedIFR.FormatDecimal(pfViewer.UsesHHMM)</td>
                        <td class="gvcRight">@led.IMC.FormatDecimal(pfViewer.UsesHHMM)</td>
                        <td class="gvcRight">@led.GroundSim.FormatDecimal(pfViewer.UsesHHMM)</td>
                        <td class="gvcRight">@led.Dual.FormatDecimal(pfViewer.UsesHHMM)</td>
                        if (pfTarget.IsInstructor)
                        {
                            <td class="gvcRight">@led.CFI.FormatDecimal(pfViewer.UsesHHMM)</td>
                        }
                        if (pfTarget.TracksSecondInCommandTime)
                        {
                            <td class="gvcRight">@led.SIC.FormatDecimal(pfViewer.UsesHHMM)</td>
                        }
                        <td class="gvcRight">@led.PIC.FormatDecimal(pfViewer.UsesHHMM)</td>
                    }
                    <td class="gvcRight">@led.TotalFlightTime.FormatDecimal(pfViewer.UsesHHMM)</td>
                    <td class="noprint">
                        @if (fAllowMenu)
                        {
                            <div name="fltContext" class="popContainer">
                                <div class="ctxtMenuIcon popTrigger"></div>
                                <div class="popMenuContent popMenuHidden ctxtTight ctxtRight">
                                    @{ Html.RenderAction("FlightContextMenu", "Flights", new { le = led, contextParams = ViewBag.contextParams }); }
                                </div>
                            </div>
                            <input type="checkbox" name="selFlight" value="@led.FlightID" onchange="javascript: toggleSelectedFlight(this);" class="dn" />
                        }
                    </td>
                    <td class="noprint">
                        @if (fAllowSign)
                        {
                            if (led.CFISignatureState != LogbookEntryCore.SignatureState.Valid)
                            {
                                <a href="#" onclick="javascript: signFlight('@String.Format(CultureInfo.InvariantCulture, "~/mvc/flightedit/Sign/{0}?ret={1}", led.FlightID, HttpUtility.UrlEncode(Request.Url.PathAndQuery)).ToAbsoluteURL(Request)'); return false;">
                                    <img src="@("~/images/signaturesm.png".ToAbsolute())" style="margin-right: 3px;" alt="@((led.CFISignatureState == LogbookEntry.SignatureState.Invalid) ? Resources.SignOff.LogbookResign : Resources.SignOff.LogbookSign)" title="@((led.CFISignatureState == LogbookEntry.SignatureState.Invalid) ? Resources.SignOff.LogbookResign : Resources.SignOff.LogbookSign)" />
                                </a>
                            }
                            if ((student?.CanAddLogbook ?? false) && led.IsSignedByInstructor(pfViewer.UserName))
                            {
                                <img src="@("~/images/x.gif".ToAbsolute())" style="margin-right: 3px;" alt="@Resources.SignOff.LogbookRevokeSignature" title="@Resources.SignOff.LogbookRevokeSignature"
                                     onclick="javascript:revokeSig(@led.FlightID)" />
                            }
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
    if (currentRange.PageCount > 1)
    {
    <div id="pnlPager" class="noprint b c w100" style="padding: 5px;">
        @if (currentRange.PageNum > 0)
        {
            <a href="#" onclick="javascript: return navigateToPage(1);">&lt;&lt;</a>
            <a href="#" onclick="javascript: return navigateToPage(@currentRange.PageNum);">&lt;</a>
        }
        <input type="text" class="brdr" style="width: 8em;" id="decPage" value="@(currentRange.PageNum + 1)" name="pageRequest" />
        @{ Html.RenderAction("RenderTooltip", "MFBTemplate", new { tipID = "pagerTip", tipTextHTML = Resources.LogbookEntry.LogbookPagerTip }); }
        <span class="b">@currentRange.PageCount</span>
        <button type="button" onclick="javascript: return navigateToPage($('#decPage').val());" class="dn" id="btnSetPage"></button>
        @if (currentRange.PageNum < currentRange.PageCount - 1)
        {
            <a href="#" onclick="javascript: return navigateToPage(@(currentRange.PageNum + 2));">&gt;</a>
            <a href="#" onclick="javascript: return navigateToPage(@currentRange.PageCount);">&gt;&gt;</a>
        }
        <img src="@("~/images/progress.gif".ToAbsolute())" class="dn prgSpin imgMiddle" id="prgPager" /><span class="prgSpin">&nbsp;</span>
    </div>
    }
}

