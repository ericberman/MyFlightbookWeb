<!DOCTYPE html>
<html>
<head>
    @{ Html.RenderAction("RenderHead", "MFBTemplate", new { Title = ViewBag.Title, UseCharting = ViewBag.UseCharting, UseMaps = ViewBag.UseMaps, AddBaseRef = ViewBag.AddBaseRef ?? false }); }
    @if (!String.IsNullOrEmpty(ViewBag.PrintingCSS))
    {
        <link href="@VirtualPathUtility.ToAbsolute(ViewBag.PrintingCSS)" rel="Stylesheet" type="text/css" />
    }
</head>
    <body>
        @{ Html.RenderAction("RenderImpersonation", "MFBTemplate"); }
        @if (!(ViewBag.ForceNaked ?? false))
        {
            Html.RenderAction("RenderHeader", "MFBTemplate", new { selectedTab = ViewBag.defaultTab ?? tabID.tabHome });
            <div class="noprint centeredBody">
                <h1>@ViewBag.Title</h1>
            </div>
        }
        <div class="topForm">
            <div class="sidebarRight">
                @RenderBody()
            </div>
        </div>
        <script type="text/javascript">
            function acceptCookies() {
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("AcceptCookies", "MFBTemplate")',
                    data: JSON.stringify(new Object()),
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    success: function (response) {
                        document.cookie = response.cookie;
                        $('#privacyFooter').hide();
                    },
                    error: function (e) {  }
                });
                return false;
            }

            function viewMFBImg(src) {
                setImg(src, "imgImgToView", "divViewImg", "imgDismissBtn");
            }

            function toggleItem(targetID, onExpand, onCollapse) {
                var target = $("#" + targetID);
                var fIsCollapsed = (target[0].style.display == 'none');
                target.toggle(400);
                if (fIsCollapsed && onExpand != null)
                    onExpand();
                else if (!fIsCollapsed && onCollapse != null)
                    onCollapse();
                return fIsCollapsed;
            }

            function toggleImage(sender, targetID, onExpand, onCollapse) {
                sender.src = toggleItem(targetID, onExpand, onCollapse) ? "@VirtualPathUtility.ToAbsolute("~/images/collapse.png")" : "@VirtualPathUtility.ToAbsolute("~/images/expand.png")";
            }

            function toggleLabel(sender, targetID, expandText, collapseText, onExpand, onCollapse) {
                sender.innerText = toggleItem(targetID, onExpand, onCollapse) ? expandText : collapseText;
            }
        </script>
        <div id="divViewImg" style="display:none; overflow: hidden;" class="modalpopup">
            <button type="button" class="imgDismissBtn" id="imgDismissBtn"><img src="@VirtualPathUtility.ToAbsolute("~/images/closeimg.png")" /></button>
            <img id="imgImgToView" />
        </div>
        @if (!(ViewBag.ForceNaked ?? false))
        {
            <footer>
                @{ Html.RenderAction("RenderFooter", "MFBTemplate"); }
            </footer>
            Html.RenderAction("RenderPrivacyLink", "MFBTemplate");
        }
    </body>
</html>