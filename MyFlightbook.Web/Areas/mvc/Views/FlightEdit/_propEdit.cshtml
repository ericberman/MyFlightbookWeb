@using System.Globalization
@{
    CustomFlightProperty fp = ViewBag.fp;
    string tipID = String.Format(CultureInfo.InvariantCulture, "cptTip{0}", fp.PropTypeID);
    string propValID = String.Format(CultureInfo.InvariantCulture, "pv{0}", fp.PropTypeID);
    bool fHHMM = ViewBag.fHHMM;
    CrossFillDescriptor cfd = null;
    TimeZoneInfo timeZone = ViewBag.timeZone;
    string propTitle = fp.PropertyType.Title;
    string propTT = string.Empty;
    string description = fp.PropertyType.Description;
    // Update the label and tooltip for the correct timezone
    if (fp.PropertyType.Type == CFPPropertyType.cfpDateTime)
    {
        // Block in/out doesn't say "UTC", but it is in preferred timezone.
        propTitle = fp.PropertyType.Title + ((fp.PropTypeID == (int)CustomPropertyType.KnownProperties.IDBlockIn || fp.PropTypeID == (int)CustomPropertyType.KnownProperties.IDBlockOut) ? " (UTC)" : string.Empty);

        // Now convert it for display
        propTitle = propTitle.IndicateUTCOrCustomTimeZone(timeZone);
        if (timeZone.Id.CompareOrdinal(TimeZoneInfo.Utc.Id) != 0)
        {
            propTT = timeZone.DisplayName;
            description = description.Replace("(UTC)", timeZone.DisplayName);
        }
    }
    else if (fp.PropertyType.Type == CFPPropertyType.cfpInteger)
    {
        if (fp.PropertyType.IsLanding || fp.PropertyType.PropTypeID == (int)CustomPropertyType.KnownProperties.IDPropGliderTow)
        {
            cfd = new CrossFillDescriptor(Resources.LocalizedText.CrossfillPromptLandings, "getTotalFillFunc('fieldLandings')");
        }
        else if (fp.PropertyType.IsApproach)
        {
            cfd = new CrossFillDescriptor(Resources.LocalizedText.CrossfillPromptApproaches, "getTotalFillFunc('fieldApproaches')");
        }
    }
    else if (fp.PropertyType.Type == CFPPropertyType.cfpDecimal)
    {
        if (fp.PropertyType.PropTypeID == (int)CustomPropertyType.KnownProperties.IDPropTachStart)
        {
            cfd = new CrossFillDescriptor(Resources.LogbookEntry.TachCrossfillTip, String.Format(CultureInfo.InvariantCulture, "getTachFill(currentlySelectedAircraft, '{0}')", "~/Member/Ajax.asmx".ToAbsolute()));
        }
        else if (fp.PropertyType.PropTypeID == (int) CustomPropertyType.KnownProperties.IDPropFlightMeterStart)
        {
            cfd = new CrossFillDescriptor(Resources.LogbookEntry.FlightMeterXFillTip, String.Format(CultureInfo.InvariantCulture, "getFlightMeterFill(currentlySelectedAircraft, '{0}')", "~/Member/Ajax.asmx".ToAbsolute()));
        }
        else if (fp.PropertyType.PropTypeID == (int)CustomPropertyType.KnownProperties.IDPropTaxiTime)
        {
            cfd = new CrossFillDescriptor(Resources.LogbookEntry.TaxiCrossFillTip, String.Format(CultureInfo.InvariantCulture, "getTaxiFill('{0}')", "~/Member/Ajax.asmx".ToAbsolute()));
        }
        else if (fp.PropertyType.PropTypeID == (int)CustomPropertyType.KnownProperties.IDPropAirborneTime)
        {
            cfd = new CrossFillDescriptor(Resources.LogbookEntry.AirborneCrossFillTip, String.Format(CultureInfo.InvariantCulture, "getAirborneFill('{0}')", "~/Member/Ajax.asmx".ToAbsolute()));
        }
        else if (!fp.PropertyType.IsBasicDecimal)
        {
            cfd = new CrossFillDescriptor(Resources.LocalizedText.CrossfillPrompt, "getTotalFillFunc('fieldTotal')");
        }
    }

    string idCptTitle = String.Format(CultureInfo.InvariantCulture, "cptTitleLbl{0}", fp.PropTypeID);
    string idCptTip = String.Format(CultureInfo.InvariantCulture, "cptTitleTip{0}", fp.PropTypeID);
}
<div class="propItemFlow" style="@(ViewBag.hideByDefault ? Html.Raw("display: none;") : string.Empty)">
    <div style="display: none;" id="@idCptTip">
        <p style="font-weight:bold;">@fp.PropertyType.Title</p>
        <p>@description</p>
        @if (!string.IsNullOrEmpty(propTT))
        {
            <p style="font-weight: bold;">@propTT</p>
        }
    </div>
    <div style="overflow: hidden; text-overflow: ellipsis; white-space:nowrap; width: 100%"  >
        <span class="itemlabel" style="font-size: smaller;" title="" id="@idCptTitle">@propTitle</span>
    </div>
    <div>
        <input type="hidden" value="@fp.PropID" />
        <input type="hidden" value="@fp.PropTypeID" />
        @{
            switch (fp.PropertyType.Type)
            {
                case CFPPropertyType.cfpInteger:
                    Html.RenderAction("RenderIntegerField", "MFBTemplate", new { id = propValID, name = string.Empty, value = fp.IntValue, cfd = cfd });
                    break;
                case CFPPropertyType.cfpDecimal:
                    Html.RenderAction("RenderDecimalField", "MFBTemplate", new { mode = fHHMM && !fp.PropertyType.IsBasicDecimal ? EditMode.HHMMFormat : EditMode.Decimal, id = propValID, name = string.Empty, value = fp.DecValue, cfd = cfd });
                    break;
                case CFPPropertyType.cfpCurrency:
                    Html.RenderAction("RenderDecimalField", "MFBTemplate", new { mode = EditMode.Decimal, id = propValID, name = string.Empty, value = fp.DecValue, cfd = cfd });
                    break;
                case CFPPropertyType.cfpBoolean:
                    {
                        <input type="checkbox" @fp.BoolValue.ToChecked() id="@propValID" />
                    }
                    break;
                case CFPPropertyType.cfpDate:
                    {
                        <input type="date" value="@fp.DateValue.YMDString()" id="@propValID" />
                    }
                    break;
                case CFPPropertyType.cfpDateTime:
                    { Html.RenderAction("RenderDateTimeField", "MFBTemplate", new { id = propValID, name = "propDateTime", value = fp.DateValue, timeZone = timeZone }); }
                    break;
                case CFPPropertyType.cfpString:
                    {
                        <input type="text" style="width: 100%;" id="@propValID" value="@fp.TextValue" />
                        if (!fp.PropertyType.IsNoAutocomplete)
                        {
                            <script type="text/javascript">
                    $("@("#" + propValID)").autocomplete({ source: @Html.Raw(Json.Encode(fp.PropertyType.PreviousValues)), minLength: 2, classes: { "ui-autocomplete": "AutoExtender AutoExtenderList" } });
                            </script>
                        }
                    }
                    break;
            }
        }
    </div>
</div>
<script type="text/javascript">
    $(() => {
        $("#@idCptTitle").tooltip({
            classes: { "ui-tooltip": "hintPopup itemlabel" },
            content: $("#@idCptTip").html()
        });
    });
</script>
