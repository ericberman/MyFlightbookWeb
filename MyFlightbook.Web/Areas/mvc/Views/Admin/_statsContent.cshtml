@using MyFlightbook.Charting
@using MyFlightbook.Histogram
@using MyFlightbook.Web.Admin
@using MyFlightbook.Payments
@using Newtonsoft.Json
@using Newtonsoft.Json.Converters
@using System.Data
@using System.Globalization
@{
    AdminStats stats = ViewBag.stats;
    bool fEmailOnly = ViewBag.emailOnly;

    GoogleChartData newUserChart = new GoogleChartData()
    {
        ChartType = GoogleChartType.LineChart,
        XDataType = GoogleColumnDataType.date,
        YDataType = GoogleColumnDataType.number,
        Y2DataType = GoogleColumnDataType.number,
        UseMonthYearDate = true,
        Title = "Number of Users",
        LegendType = GoogleLegendType.bottom,
        TickSpacing = 1,
        SlantAngle = 0,
        XLabel = "Year/Month",
        YLabel = "New Users",
        Y2Label = "Cumulative Users",
        Width = 800,
        Height = 400,
        ContainerID = "newUserDiv"
    };
    foreach (NewUserStats nus in stats.NewUserStatsMonthly)
    {
        newUserChart.XVals.Add(nus.DisplayPeriod);
        newUserChart.YVals.Add(nus.NewUsers);
        newUserChart.Y2Vals.Add(nus.RunningTotal);
    }

    GoogleChartData flightsByDateChart = null;
    GoogleChartData activityChart = null;

    if (!fEmailOnly)
    {
        activityChart = new GoogleChartData()
        {
            LegendType = GoogleLegendType.right,
            UseMonthYearDate = true,
            XDataType = GoogleColumnDataType.date,
            Title = "User Activity",
            XLabel = "Date of Last Activity",
            YLabel = "Users",
            SlantAngle = 90,
            ChartType = GoogleChartType.LineChart,
            Width = 800,
            Height = 400,
            ContainerID = "userActivityDiv"
        };
        foreach (UserActivityStats uas in stats.UserActivity)
        {
            activityChart.XVals.Add(uas.Date);
            activityChart.YVals.Add(uas.Count);
        }

        flightsByDateChart = new GoogleChartData()
        {
            LegendType = GoogleLegendType.bottom,
            Title = "Flights recorded / month",
            XDataType = GoogleColumnDataType.@string,
            YDataType = GoogleColumnDataType.number,
            UseMonthYearDate = true,
            Y2DataType = GoogleColumnDataType.number,
            XLabel = "Flights/Month",
            TickSpacing = 36,
            YLabel = "Flights",
            Y2Label = "Running Total",
            SlantAngle = 90,
            ChartType = GoogleChartType.LineChart,
            Width = 1000,
            Height = 500,
            ContainerID = "flightsByDateDiv"
        };
        YearMonthBucketManager bmFlights = new YearMonthBucketManager() { BucketSelectorName = "DateRange" };

        HistogramManager hmFlightsByDate = new HistogramManager()
        {
            SourceData = stats.FlightsByDate,
            SupportedBucketManagers = new BucketManager[] { bmFlights },
            Values = new HistogramableValue[] { new HistogramableValue("DateRange", "Flights", HistogramValueTypes.Time) }
        };
        bmFlights.ScanData(hmFlightsByDate);

        using (DataTable dt = bmFlights.ToDataTable(hmFlightsByDate))
        {
            foreach (DataRow dr in dt.Rows)
            {
                flightsByDateChart.XVals.Add((string)dr["DisplayName"]);
                flightsByDateChart.YVals.Add((int)Convert.ToDouble(dr["Flights"], CultureInfo.InvariantCulture));
                flightsByDateChart.Y2Vals.Add((int)Convert.ToDouble(dr["Flights Running Total"], CultureInfo.InvariantCulture));
            }
        }
    }
}
<h2>Users:</h2>
<table class="stickyHeaderTable">
    <thead>
        <tr>
            <th class="headerBase gvhDefault"># Users</th>
            <th class="headerBase gvhDefault">Month To Date Users</th>
            <th class="headerBase gvhDefault">Email Subscriptions</th>
            <th class="headerBase gvhDefault">Blacklists</th>
            <th class="headerBase gvhDefault">Dropbox Users</th>
            <th class="headerBase gvhDefault">GDrive Users</th>
            <th class="headerBase gvhDefault">1Drive Users</th>
            <th class="headerBase gvhDefault">Multiple Cloud Users</th>
            <th class="headerBase gvhDefault">DefaultCloud Users</th>
        </tr>
    </thead>
    <tr>
        <td>@stats.UserStats.Users.PrettyString()</td>
        <td>@stats.UserStats.UsersMonthToDate.PrettyString()</td>
        <td>@stats.UserStats.EmailSubscriptions.PrettyString()</td>
        <td>@stats.UserStats.PropertyBlacklists.PrettyString()</td>
        <td>@stats.UserStats.DropboxUsers.PrettyString()</td>
        <td>@stats.UserStats.GDriveUsers.PrettyString()</td>
        <td>@stats.UserStats.OneDriveUsers.PrettyString()</td>
        <td>@stats.UserStats.CloudStorageUsers.PrettyString()</td>
        <td>@stats.UserStats.DefaultedCloudUsers.PrettyString()</td>
    </tr>
</table>
<table class="stickyHeaderTable">
    <thead>
        <tr>
            <th class="headerBase gvhDefault"># Nonce</th>
            <th class="headerBase gvhDefault"># oAuth Accounts</th>
            <th class="headerBase gvhDefault"># Password Resets</th>
        </tr>
    </thead>
    <tr>
        <td>@stats.OAuth.NonceCount.PrettyString()</td>
        <td>@stats.OAuth.OAuthAccounts.PrettyString()</td>
        <td>@stats.OAuth.PasswordResets.PrettyString()</td>
    </tr>
</table>
@if (!fEmailOnly)
{
    <script type="text/javascript">
        function trimOauthTokens() {
            $("#imgProgress").toggle();
            var params = new Object();
            var d = JSON.stringify(params);
            $.ajax({
                url: '@Url.Action("TrimOldTokensAndAuths", "Admin")',
                type: "POST", data: d, dataType: "text", contentType: "application/json",
                error: function (xhr, status, error) { window.alert(xhr.responseText); },
                complete: function (response) { $("#imgProgress").toggle(); },
                success: function (response) { $("#lblTrimErr").text(response); }
            });
        }

        function trimOAuthOther() {
            var params = new Object();
            var d = JSON.stringify(params);
            $.ajax({
                url: '@Url.Action("TrimOldOAuth", "Admin")',
                type: "POST", data: d, dataType: "text", contentType: "application/json",
                error: function (xhr, status, error) { window.alert(xhr.responseText); },
                complete: function (response) { },
                success: function (response) { window.alert("Done!"); }
            });
        }
        function updateFlightsPerUser() {
            $("#imgFPUProgress").toggle();
            var params = new Object();
            params.dateRange = $("#cmbFlightsPerUserDateRange").val();
            var d = JSON.stringify(params);
            $.ajax({
                url: '@Url.Action("FlightsPerUser", "Admin")',
                type: "POST", data: d, dataType: "text", contentType: "application/json",
                error: function (xhr, status, error) { window.alert(xhr.responseText); },
                complete: function (response) { $("#imgFPUProgress").toggle(); },
                success: function (response) { $("#divFlightsPerUserResults").html(response); }
            });
        }
    </script>
    <div>
        <button type="button" onclick="javascript: trimOauthTokens();">Trim all but latest authuser/expired tokens</button>
        <button type="button" onclick="javascript: trimOAuthOther();">Trim old oAuth authentications / password resets</button>
        <div id="imgProgress" style="display:none;"><img src="@VirtualPathUtility.ToAbsolute("~/images/progress.gif")" /></div>
        <div style="font-weight:bold" id="lblTrimErr"></div>
    </div>
}
<h2>Usage:</h2>
<table class="stickyHeaderTable">
    <thead>
        <tr>
            <th class="headerBase gvhDefault"># Students</th>
            <th class="headerBase gvhDefault"># Pub Notes</th>
            <th class="headerBase gvhDefault"># Private Notes</th>
            <th class="headerBase gvhDefault"># Linked videos</th>
            <th class="headerBase gvhDefault"># AWS Videos</th>
            <th class="headerBase gvhDefault"># Clubs</th>
        </tr>
    </thead>
    <tr>
        <td>@stats.Misc.Students.PrettyString()</td>
        <td>@stats.Misc.PublicNotes.PrettyString()</td>
        <td>@stats.Misc.PrivateNotes.PrettyString()</td>
        <td>@stats.Misc.EmbeddedVideos.PrettyString()</td>
        <td>@stats.Misc.AWSVideos.PrettyString()</td>
        <td>@stats.Misc.Clubs.PrettyString()</td>
    </tr>
</table>

<table>
    <tr style="vertical-align:top;">
        <td>
            <table class="stickyHeaderTable">
                <thead>
                    <tr>
                        <th class="headerBase gvhDefault">Source Key</th>
                        <th class="headerBase gvhDefault"># Users</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (AppSourceStats appSourceStats in stats.AppSources)
                    {
                        <tr>
                            <td>@appSourceStats.SourceKey</td>
                            <td style="text-align:right">@appSourceStats.NumUsers.PrettyString()</td>
                        </tr>
                    }
                </tbody>
            </table>
        </td>
        <td>
            <table class="stickyHeaderTable">
                <thead>
                    <tr>
                        <th class="headerBase gvhDefault">Event Type</th>
                        <th class="headerBase gvhDefault"># Events</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (WebServiceEventStats ws in stats.WSEvents)
                    {
                        <tr>
                            <td>@ws.EventType</td>
                            <td style="text-align:right">@ws.EventCount.PrettyString()</td>
                        </tr>
                    }
                </tbody>
            </table>
        </td>
    </tr>
    <tr style="vertical-align:top;">
        <td>
            <table class="stickyHeaderTable">
                <thead>
                    <tr style="text-align:right">
                        <th class="headerBase gvhDefault"># Payments</th>
                        <th class="headerBase gvhDefault"># Users</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (UserTransactionSummary uts in stats.UserTransactions)
                    {
                        <tr style="text-align:right">
                            <td>@uts.NumPayments.PrettyString()</td>
                            <td>@uts.NumUsers.PrettyString()</td>
                        </tr>
                    }
                </tbody>
            </table>
        </td>
        <td>
            <table class="stickyHeaderTable">
                <thead>
                    <tr>
                        <th class="headerBase gvhDefault"># Xactions</th>
                        <th class="headerBase gvhDefault">Amount</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (AmountTransactionSummary ats in stats.AmountTransactions)
                    {
                        <tr style="text-align:right">
                            <td>@ats.NumTransactions.PrettyString()</td>
                            <td>@ats.TransactionValue.ToString("C")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </td>
    </tr>
</table>
<h2>Flights and Aircraft:</h2>
<table>
    <tr style="vertical-align:top">
        <td>
            <table class="stickyHeaderTable">
                <thead>
                    <tr>
                        <th class="headerBase gvhDefault"># Flights</th>
                        <th class="headerBase gvhDefault"># Flights w/Telemetry</th>
                        <th class="headerBase gvhDefault"># Models</th>
                        <th class="headerBase gvhDefault"># User Airports</th>
                        <th class="headerBase gvhDefault"># WS Flights</th>
                        <th class="headerBase gvhDefault"># Imported Flights</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@stats.LogStats.FlightCount.PrettyString()</td>
                        <td>@stats.LogStats.TelemetryCount.PrettyString()</td>
                        <td>@stats.LogStats.ModelsCount.PrettyString()</td>
                        <td>@stats.LogStats.UserAirportCount.PrettyString()</td>
                        <td>@stats.LogStats.WSCommittedFlights.PrettyString()</td>
                        <td>@stats.LogStats.ImportedFlights.PrettyString()</td>
                    </tr>
                </tbody>
            </table>
        </td>
        <td>
            <table class="stickyHeaderTable">
                <thead>
                    <tr>
                        <th class="headerBase gvhDefault">Instance Type</th>
                        <th class="headerBase gvhDefault"># Aircraft</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (AircraftInstance.AircraftInstanceTypeStat ats in stats.AircraftInstances)
                    {
                        <tr>
                            <td>@ats.InstanceType</td>
                            <td style="text-align:right;">@ats.NumAircraft.PrettyString()</td>
                        </tr>
                    }
                </tbody>
            </table>
        </td>
    </tr>
</table>
<!-- Daily new users -->
@if (fEmailOnly)
{
    <h2>New Users</h2>
}
else
{
    <h2>@{ Html.RenderAction("RenderExpandoText", "MFBTemplate", new { fExpanded = false, targetID = "divNewUsers", labelText = "New Users" }); } </h2>
}
<div id="divNewUsers" style="@(fEmailOnly ? string.Empty : "display:none")">
    <h2>Daily new users:</h2>
    <table class="stickyHeaderTable" style="width:fit-content">
        <thead>
            <tr>
                <th class="headerBase gvhDefault">Month</th>
                <th class="headerBase gvhDefault">New Users</th>
                <th class="headerBase gvhDefault">Running Total</th>
            </tr>
        </thead>
        <tbody>
            @foreach (NewUserStats nus in stats.NewUserStatsDaily)
            {
                <tr>
                    <td>@nus.DisplayPeriod.ToShortDateString()</td>
                    <td style="text-align:right;">@nus.NewUsers.PrettyString()</td>
                    <td style="text-align:right;">@nus.RunningTotal.PrettyString()</td>
                </tr>
            }
        </tbody>
    </table>
    <h2>Monthly new users:</h2>
    <table class="stickyHeaderTable" style="width:fit-content">
        <thead>
            <tr>
                <th class="headerBase gvhDefault">Month</th>
                <th class="headerBase gvhDefault">New Users</th>
                <th class="headerBase gvhDefault">Running Total</th>
            </tr>
        </thead>
        <tbody>
            @foreach (NewUserStats nus in stats.NewUserStatsMonthly)
            {
                <tr>
                    <td>@nus.DisplayPeriod.ToShortDateString()</td>
                    <td style="text-align:right;">@nus.NewUsers.PrettyString()</td>
                    <td style="text-align:right;">@nus.RunningTotal.PrettyString()</td>
                </tr>
            }
        </tbody>
    </table>
</div>
@if (!fEmailOnly)
{
    <div id="@newUserChart.ContainerID" style="display: inline-block; margin: 0 auto !important; height: @(newUserChart.Height.ToString(CultureInfo.InvariantCulture) + "px")">
    </div>
    <h3>User Activity</h3>
    <div id="@activityChart.ContainerID" style="display: inline-block; margin: 0 auto !important; height: @(activityChart.Height.ToString(CultureInfo.InvariantCulture) + "px")">
    </div>

    <!-- Flights per user -->
    <h3>Flights per user</h3>
    <div>
        <select id="cmbFlightsPerUserDateRange" name="dateRange" onchange="javascript: updateFlightsPerUser();">
            <option selected value="">All</option>
            <option value="1">1 Month</option>
            <option value="2">2 Months</option>
            <option value="3">3 Months</option>
            <option value="4">4 Months</option>
            <option value="5">5 Months</option>
            <option value="6">6 Months</option>
            <option value="12">1 Year</option>
            <option value="24">2 Years</option>
        </select>
    </div>
    <div id="imgFPUProgress" style="display:none;"><img src="@VirtualPathUtility.ToAbsolute("~/images/progress.gif")" /></div>
    <div id="divFlightsPerUserResults">
        <script type="text/javascript">
            $(function () {
                updateFlightsPerUser();
            });
        </script>
    </div>
    <!-- Flight trends -->
    <h3>Flights on the site:</h3>
    <div id="@flightsByDateChart.ContainerID" style="display: inline-block; margin: 0 auto !important; height: @(flightsByDateChart.Height.ToString(CultureInfo.InvariantCulture) + "px")">
    </div>
    <h2>@{ Html.RenderAction("RenderExpandoText", "MFBTemplate", new { fExpanded = false, targetID = "divFlightsByDate", labelText = "Flight Data" }); } </h2>

    <div id="divFlightsByDate" style="display:none;">
        <table class="stickyHeaderTable" style="width:fit-content">
            <thead>
                <tr>
                    <th class="headerBase gvhDefault">Month</th>
                    <th class="headerBase gvhDefault">New Users</th>
                    <th class="headerBase gvhDefault">Running Total</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < flightsByDateChart.XVals.Count; i++)
                {
                    <tr>
                        <td>@flightsByDateChart.XVals[i]</td>
                        <td>@(((int)flightsByDateChart.YVals[i]).PrettyString())</td>
                        <td>@(((int)flightsByDateChart.Y2Vals[i]).PrettyString())</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
<script type="text/javascript">
    chartsToDraw.push(@Html.Raw(JsonConvert.SerializeObject(newUserChart, new JsonConverter[] { new JavaScriptDateTimeConverter() })));
    chartsToDraw.push(@Html.Raw(JsonConvert.SerializeObject(activityChart, new JsonConverter[] { new JavaScriptDateTimeConverter() })));
    chartsToDraw.push(@Html.Raw(JsonConvert.SerializeObject(flightsByDateChart, new JsonConverter[] { new JavaScriptDateTimeConverter() })));
</script>
